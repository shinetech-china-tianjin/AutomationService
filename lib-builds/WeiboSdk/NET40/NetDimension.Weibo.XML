<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetDimension.Weibo</name>
    </assembly>
    <members>
        <member name="T:NetDimension.Weibo.AsyncCallback`1">
            <summary>
                异步调用的回调参数
            </summary>
            <typeparam name="T">返回值类型</typeparam>
        </member>
        <member name="P:NetDimension.Weibo.AsyncCallback`1.IsSuccess">
            <summary>
                调用是否成功
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.AsyncCallback`1.Data">
            <summary>
                返回值
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.AsyncCallback`1.Error">
            <summary>
                异常对象，如果IsSuccess为true则本对象为null
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.AsyncInvokeDelegate`1">
            <summary>
                异步调用中的函数调用代理
            </summary>
            <typeparam name="T">API返回的类型</typeparam>
            <returns>T</returns>
        </member>
        <member name="T:NetDimension.Weibo.AsyncCallbackDelegate`1">
            <summary>
                异步调用中的回调代理
            </summary>
            <typeparam name="T">函数调用中的返回类型</typeparam>
            <param name="result">AsyncCallback对象</param>
        </member>
        <member name="T:NetDimension.Weibo.Client">
            <summary>
                微博操作类
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Client.#ctor(NetDimension.Weibo.OAuth)">
            <summary>
                实例化微博操作类
            </summary>
            <param name="oauth">OAuth实例</param>
        </member>
        <member name="M:NetDimension.Weibo.Client.PostCommand(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
                用POST方式发送微博指令
            </summary>
            <param name="command">微博命令。命令例如：statuses/public_timeline。详见官方API文档。</param>
            <param name="parameters">参数表</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Client.PostCommand(System.String,NetDimension.Weibo.WeiboParameter[])">
            <summary>
                用POST方式发送微博指令
            </summary>
            <param name="command">微博命令。命令例如：statuses/public_timeline。详见官方API文档。</param>
            <param name="parameters">参数表</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Client.GetCommand(System.String,NetDimension.Weibo.WeiboParameter[])">
            <summary>
                用GET方式发送微博指令
            </summary>
            <param name="command">微博命令。命令例如：statuses/public_timeline。详见官方API文档。</param>
            <param name="parameters">参数表</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Client.GetCommand(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
                用GET方式发送微博指令
            </summary>
            <param name="command">微博命令。命令例如：statuses/public_timeline。详见官方API文档。</param>
            <param name="parameters">参数表</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Client.AsyncInvoke``1(NetDimension.Weibo.AsyncInvokeDelegate{``0},NetDimension.Weibo.AsyncCallbackDelegate{``0})">
            <summary>
                API接口异步调用
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="invoker">调用代理</param>
            <param name="callback">回调代理</param>
        </member>
        <member name="P:NetDimension.Weibo.Client.OAuth">
            <summary>
                OAuth实例
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Client.API">
            <summary>
                微博动态类型接口
            </summary>
        </member>
        <member name="T:Codeplex.Data.DynamicJson">
            <summary>
                DynamicJson
            </summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.#ctor">
            <summary>create blank JSObject</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.Parse(System.String)">
            <summary>from JsonSring to DynamicJson</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.Parse(System.String,System.Text.Encoding)">
            <summary>from JsonSring to DynamicJson</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.Parse(System.IO.Stream)">
            <summary>from JsonSringStream to DynamicJson</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.Parse(System.IO.Stream,System.Text.Encoding)">
            <summary>from JsonSringStream to DynamicJson</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.Serialize(System.Object)">
            <summary>create JsonSring from primitive or IEnumerable or Object({public property name:property value})</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.IsDefined(System.String)">
            <summary>has property or not</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.IsDefined(System.Int32)">
            <summary>has property or not</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.Delete(System.String)">
            <summary>delete property</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.Delete(System.Int32)">
            <summary>delete property</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.Deserialize``1">
            <summary>mapping to Array or Class by Public PropertyName</summary>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            </summary>
            <param name="binder"></param>
            <param name="indexes"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.GetDynamicMemberNames">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Codeplex.Data.DynamicJson.ToString">
            <summary>Serialize to JsonString</summary>
        </member>
        <member name="P:Codeplex.Data.DynamicJson.IsObject">
            <summary>
            </summary>
        </member>
        <member name="P:Codeplex.Data.DynamicJson.IsArray">
            <summary>
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.Entities.EntityBase">
            <summary>
                EntityBase
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Entities.EntityBase.ToString">
            <summary>
                返回对象原始Json字符串
            </summary>
            <returns>json</returns>
        </member>
        <member name="P:NetDimension.Weibo.Entities.comment.Collection.Comments">
            <summary>
                评论集合
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.comment.Collection.ProviousCursor">
            <summary>
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.ID">
            <summary>
                用户UID
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.IDStr">
            <summary>
                用户UID(字符型)
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.ScreenName">
            <summary>
                用户昵称
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Name">
            <summary>
                友好显示名称
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Province">
            <summary>
                用户所在地区ID
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.City">
            <summary>
                用户所在城市ID
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Location">
            <summary>
                用户所在地
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Description">
            <summary>
                用户描述
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Url">
            <summary>
                用户博客地址
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.ProfileImageUrl">
            <summary>
                用户头像地址
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.ProfileUrl">
            <summary>
                用户微博主页地址
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Domain">
            <summary>
                用户的个性化域名
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Weihao">
            <summary>
                用户的微号
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Gender">
            <summary>
                性别，m：男、f：女、n：未知
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.FollowersCount">
            <summary>
                粉丝数
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.FriendsCount">
            <summary>
                关注数
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.StatusesCount">
            <summary>
                微博数
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.FavouritesCount">
            <summary>
                收藏数
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.CreatedAt">
            <summary>
                创建时间
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Following">
            <summary>
                当前登录用户是否已关注该用户
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.AllowAllActMsg">
            <summary>
                是否允许所有人给我发私信
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.GEOEnabled">
            <summary>
                是否允许带有地理信息
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Verified">
            <summary>
                是否是微博认证用户，即带V用户
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.VerifiedType">
            <summary>
                微博认证用户的类型
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Remark">
            <summary>
                备注信息
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Status">
            <summary>
                用户的最近一条微博信息字段
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.AllowAllComment">
            <summary>
                是否允许所有人对我的微博进行评论
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.AvatarLarge">
            <summary>
                用户大头像地址
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.VerifiedReason">
            <summary>
                认证原因
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.FollowMe">
            <summary>
                该用户是否关注当前登录用户
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.OnlineStatus">
            <summary>
                用户的在线状态，0：不在线、1：在线
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.BIFollowersCount">
            <summary>
                用户的互粉数
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Entities.user.Entity.Lang">
            <summary>
                用户使用语言类型
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.Error">
            <summary>
                错误类
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Error.Code">
            <summary>
                错误编码
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Error.Request">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Error.Message">
            <summary>
                消息
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.Interface.WeiboAPI">
            <summary>
                微博API接口封装基类
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.Interface.WeiboAPI.Client">
            <summary>
                操作类
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.WeiboAPI.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类实例</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.AccountAPI.GetPrivacy">
            <summary>
                获取当前登录用户的隐私设置
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.AccountAPI.SchoolList(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                获取所有的学校列表
            </summary>
            <param name="province">省份范围，省份ID。</param>
            <param name="city">城市范围，城市ID。</param>
            <param name="area">区域范围，区ID。</param>
            <param name="type">学校类型，1：大学、2：高中、3：中专技校、4：初中、5：小学，默认为1。</param>
            <param name="capital">学校首字母，默认为A。 </param>
            <param name="keyword">学校名称关键字。</param>
            <param name="count">返回的记录条数，默认为10。</param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.AccountAPI.RateLimitStatus">
            <summary>
                获取当前登录用户的API访问频率限制情况
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.AccountAPI.GetUID">
            <summary>
                OAuth授权之后，获取授权用户的UID
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.AccountAPI.EndSession">
            <summary>
                退出登录
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.AccountAPI.VerifyNickname(System.String)">
            <summary>
                验证昵称是否可用，并给予建议昵称
            </summary>
            <param name="nickname">需要验证的昵称。4-20个字符，支持中英文、数字、"_"或减号。必须做URLEncode，采用UTF-8编码。 </param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.AccountAPI.UnreadCount(System.String,System.String)">
            <summary>
                获取某个用户的各种消息未读数
            </summary>
            <param name="uid">需要获取消息未读数的用户UID，必须是当前登录用户。</param>
            <param name="callback">JSONP回调函数，用于前端调用返回JS格式的信息。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.AccountAPI.SetCount(NetDimension.Weibo.ResetCountType)">
            <summary>
                对当前登录用户某一种消息未读数进行清零
            </summary>
            <param name="type">需要清零未读数的消息项，status：新微博数、follower：新粉丝数、cmt：新评论数、dm：新私信数、mention_status：新提及我的微博数、mention_cmt：新提及我的评论数，一次只能操作一项。 </param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommentAPI.Show(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                根据微博ID返回某条微博的评论列表
            </summary>
            <param name="id">需要查询的微博ID。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。</param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommentAPI.ByMe(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户所发出的评论列表
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommentAPI.ToMe(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户所接收到的评论列表
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommentAPI.Timeline(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的最新评论包括接收到的与发出的
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommentAPI.Mentions(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取最新的提到当前登录用户的评论，即@我的评论
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommentAPI.ShowBatch(System.String[])">
            <summary>
                根据评论ID批量返回评论信息
            </summary>
            <param name="cids">需要查询的批量评论ID，最大50。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommentAPI.Create(System.String,System.String,System.Boolean)">
            <summary>
                对一条微博进行评论
            </summary>
            <param name="id">需要评论的微博ID。</param>
            <param name="comment">评论内容，必须做URLencode，内容不超过140个汉字。 </param>
            <param name="commentOrigin">当评论转发微博时，是否评论给原微博，0：否、1：是，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommentAPI.Destroy(System.String)">
            <summary>
                删除一条评论
            </summary>
            <param name="cid">要删除的评论ID，只能删除登录用户自己发布的评论。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommentAPI.DestroyBatch(System.String[])">
            <summary>
                根据评论ID批量删除评论
            </summary>
            <param name="ids">需要删除的评论ID，最多20个。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommentAPI.Reply(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                回复一条评论
            </summary>
            <param name="cid">需要回复的评论ID。</param>
            <param name="id">需要评论的微博ID。</param>
            <param name="comment">回复评论内容，必须做URLencode，内容不超过140个汉字。 </param>
            <param name="withoutMention">回复中是否自动加入“回复@用户名”，0：是、1：否，默认为0。 </param>
            <param name="commentOrigin">当评论转发微博时，是否评论给原微博，0：否、1：是，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommonAPI.CodeToLocation(System.String[])">
            <summary>
                通过地址编码获取地址名称
            </summary>
            <param name="codes">需要查询的地址编码</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommonAPI.GetCity(System.String,System.String)">
            <summary>
                获取城市列表
            </summary>
            <param name="province">省份的省份代码。</param>
            <param name="capital">城市的首字母，a-z，可为空代表返回全部，默认为全部。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommonAPI.GetProvince(System.String,System.String)">
            <summary>
                获取省份列表
            </summary>
            <param name="country">国家的国家代码。</param>
            <param name="capital">省份的首字母，a-z，可为空代表返回全部，默认为全部。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommonAPI.GetCountry(System.String)">
            <summary>
                获取国家列表
            </summary>
            <param name="capital">国家的首字母，a-z，可为空代表返回全部，默认为全部。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.CommonAPI.GetTimezone">
            <summary>
                获取时区配置表
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.AccountInterface">
            <summary>
                Account接口
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.Interface.WeiboInterface">
            <summary>
                微博API接口封装基类
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.Interface.WeiboInterface.Client">
            <summary>
                操作类
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.WeiboInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类实例</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.AccountInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.AccountInterface.GetPrivacy">
            <summary>
                获取当前登录用户的隐私设置
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.AccountInterface.SchoolList(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                获取所有的学校列表
            </summary>
            <param name="province">省份范围，省份ID。</param>
            <param name="city">城市范围，城市ID。</param>
            <param name="area">区域范围，区ID。</param>
            <param name="type">学校类型，1：大学、2：高中、3：中专技校、4：初中、5：小学，默认为1。</param>
            <param name="capital">学校首字母，默认为A。 </param>
            <param name="keyword">学校名称关键字。</param>
            <param name="count">返回的记录条数，默认为10。</param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.AccountInterface.RateLimitStatus">
            <summary>
                获取当前登录用户的API访问频率限制情况
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.AccountInterface.GetUID">
            <summary>
                OAuth授权之后，获取授权用户的UID
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.AccountInterface.EndSession">
            <summary>
                退出登录
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.AccountInterface.VerifyNickname(System.String)">
            <summary>
                验证昵称是否可用，并给予建议昵称
            </summary>
            <param name="nickname">需要验证的昵称。4-20个字符，支持中英文、数字、"_"或减号。必须做URLEncode，采用UTF-8编码。 </param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.AccountInterface.UnreadCount(System.String,System.String)">
            <summary>
                获取某个用户的各种消息未读数
            </summary>
            <param name="uid">需要获取消息未读数的用户UID，必须是当前登录用户。</param>
            <param name="callback">JSONP回调函数，用于前端调用返回JS格式的信息。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.AccountInterface.SetCount(NetDimension.Weibo.ResetCountType)">
            <summary>
                对当前登录用户某一种消息未读数进行清零
            </summary>
            <param name="type">需要清零未读数的消息项，status：新微博数、follower：新粉丝数、cmt：新评论数、dm：新私信数、mention_status：新提及我的微博数、mention_cmt：新提及我的评论数，一次只能操作一项。 </param>
            <returns>JSON</returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.CommentInterface">
            <summary>
                Comment接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.Show(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                根据微博ID返回某条微博的评论列表
            </summary>
            <param name="id">需要查询的微博ID。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。</param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.ByMe(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户所发出的评论列表
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.ToMe(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户所接收到的评论列表
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.Timeline(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的最新评论包括接收到的与发出的
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.Mentions(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取最新的提到当前登录用户的评论，即@我的评论
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.ShowBatch(System.String[])">
            <summary>
                根据评论ID批量返回评论信息
            </summary>
            <param name="cids">需要查询的批量评论ID，最大50。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.Create(System.String,System.String,System.Boolean)">
            <summary>
                对一条微博进行评论
            </summary>
            <param name="id">需要评论的微博ID。</param>
            <param name="comment">评论内容，必须做URLencode，内容不超过140个汉字。 </param>
            <param name="commentOrigin">当评论转发微博时，是否评论给原微博，0：否、1：是，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.Destroy(System.String)">
            <summary>
                删除一条评论
            </summary>
            <param name="cid">要删除的评论ID，只能删除登录用户自己发布的评论。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.DestroyBatch(System.String[])">
            <summary>
                根据评论ID批量删除评论
            </summary>
            <param name="ids">需要删除的评论ID，最多20个。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommentInterface.Reply(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                回复一条评论
            </summary>
            <param name="cid">需要回复的评论ID。</param>
            <param name="id">需要评论的微博ID。</param>
            <param name="comment">回复评论内容，必须做URLencode，内容不超过140个汉字。 </param>
            <param name="withoutMention">回复中是否自动加入“回复@用户名”，0：是、1：否，默认为0。 </param>
            <param name="commentOrigin">当评论转发微博时，是否评论给原微博，0：否、1：是，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.CommonInterface">
            <summary>
                Common接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommonInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommonInterface.CodeToLocation(System.String[])">
            <summary>
                通过地址编码获取地址名称
            </summary>
            <param name="codes">需要查询的地址编码</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommonInterface.GetCity(System.String,System.String)">
            <summary>
                获取城市列表
            </summary>
            <param name="province">省份的省份代码。</param>
            <param name="capital">城市的首字母，a-z，可为空代表返回全部，默认为全部。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommonInterface.GetProvince(System.String,System.String)">
            <summary>
                获取省份列表
            </summary>
            <param name="country">国家的国家代码。</param>
            <param name="capital">省份的首字母，a-z，可为空代表返回全部，默认为全部。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommonInterface.GetCountry(System.String)">
            <summary>
                获取国家列表
            </summary>
            <param name="capital">国家的首字母，a-z，可为空代表返回全部，默认为全部。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.CommonInterface.GetTimezone">
            <summary>
                获取时区配置表
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface">
            <summary>
                Favorite接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.Favorites(System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的收藏列表
            </summary>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.FavoriteIDs(System.Int32,System.Int32)">
            <summary>
                获取当前用户的收藏列表的ID
            </summary>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.Show(System.String)">
            <summary>
                根据收藏ID获取指定的收藏信息
            </summary>
            <param name="id">需要查询的收藏ID。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.ByTags(System.String,System.Int32,System.Int32)">
            <summary>
                根据标签获取当前登录用户该标签下的收藏列表
            </summary>
            <param name="tid">需要查询的标签ID。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.Tags(System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的收藏标签列表
            </summary>
            <param name="count">单页返回的记录条数，默认为10。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.ByTagIDs(System.String,System.Int32,System.Int32)">
            <summary>
                获取当前用户某个标签下的收藏列表的ID
            </summary>
            <param name="tid">需要查询的标签ID。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.Create(System.String)">
            <summary>
                添加一条微博到收藏里
            </summary>
            <param name="id">要收藏的微博ID。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.Destroy(System.String)">
            <summary>
                取消收藏一条微博
            </summary>
            <param name="id">要取消收藏的微博ID。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.DestroyBatch(System.String[])">
            <summary>
                根据收藏ID批量取消收藏
            </summary>
            <param name="ids">要取消收藏的收藏ID最多不超过10个。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.UpdateTags(System.String,System.String[])">
            <summary>
                更新一条收藏的收藏标签
            </summary>
            <param name="id">需要更新的收藏ID。</param>
            <param name="tags">需要更新的标签内容，最多不超过2条。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.UpdateTagsBatch(System.String,System.String)">
            <summary>
                更新当前登录用户所有收藏下的指定标签
            </summary>
            <param name="tid">需要更新的标签ID</param>
            <param name="tag">需要更新的标签内容</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FavoriteInterface.DestroyTags(System.String[])">
            <summary>
                删除当前登录用户所有收藏下的指定标签
            </summary>
            <param name="tid">需要删除的标签ID</param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface">
            <summary>
                Friendship接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.Friends(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取用户的关注列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为50，最大不超过200。</param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.FriendIDs(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取用户关注的用户UID列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为500，最大不超过5000。 </param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.FriendsInCommon(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取两个用户之间的共同关注人列表
            </summary>
            <param name="uid">需要获取共同关注关系的用户UID。</param>
            <param name="suid">需要获取共同关注关系的用户UID，默认为当前登录用户。</param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.FriendsOnBilateral(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的双向关注列表，即互粉列表
            </summary>
            <param name="uid">需要获取双向关注列表的用户UID。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="sort">排序类型，0：按关注时间最近排序，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.FriendsOnBilateralIDs(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户双向关注的用户ID列表，即互粉UID列表
            </summary>
            <param name="uid">需要获取双向关注列表的用户UID。</param>
            <param name="count">单页返回的记录条数，默认为50，最大不超过2000。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="sort">排序类型，0：按关注时间最近排序，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.Followers(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的粉丝列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为50，最大不超过200。</param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。</param>
            <param name="trimStatus">返回值中user字段中的status字段开关，0：返回完整status字段、1：status字段仅返回status_id，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.FollowerIDs(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取用户粉丝的用户UID列表
            </summary>
            <param name="uid">需要查询的用户UID。</param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为500，最大不超过5000。</param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.FollowersInActive(System.String,System.Int32)">
            <summary>
                获取用户的活跃粉丝列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="count">返回的记录条数，默认为20，最大不超过200。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.FriendsChain(System.String,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的关注人中又关注了指定用户的用户列表
            </summary>
            <param name="uid">指定的关注目标用户UID。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.Show(System.String,System.String,System.String,System.String)">
            <summary>
                获取两个用户之间的详细关注关系情况
            </summary>
            <param name="sourceID">源用户的UID。</param>
            <param name="sourceScreenName">源用户的微博昵称。 </param>
            <param name="targetID">目标用户的UID。 </param>
            <param name="targetScreenName">目标用户的微博昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.Create(System.String,System.String)">
            <summary>
                关注一个用户
            </summary>
            <param name="uid">需要关注的用户ID。</param>
            <param name="screenName">需要关注的用户昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.Destroy(System.String,System.String)">
            <summary>
                取消关注一个用户
            </summary>
            <param name="uid">需要取消关注的用户ID。</param>
            <param name="screenName">需要取消关注的用户昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.FriendshipInterface.UpdateRemark(System.String,System.String)">
            <summary>
                更新当前登录用户所关注的某个好友的备注信息
            </summary>
            <param name="uid">需要修改备注信息的用户UID。 </param>
            <param name="remark">备注信息</param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.DynamicInterfaces">
            <summary>
                动态类型API接口封装
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.DynamicInterfaces.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作器</param>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Account">
            <summary>
                账号接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Comments">
            <summary>
                评论接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Common">
            <summary>
                公共服务接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Favorites">
            <summary>
                收藏接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Friendships">
            <summary>
                关系接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Search">
            <summary>
                搜索接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.ShortUrl">
            <summary>
                锻练接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Statuses">
            <summary>
                微博接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Suggestions">
            <summary>
                推荐接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Tags">
            <summary>
                标签接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Trends">
            <summary>
                话题接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Users">
            <summary>
                用户接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Location">
            <summary>
                地理信息接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.DynamicInterfaces.Place">
            <summary>
                位置服务接口
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.LocationInterface">
            <summary>
                Location接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.GetMapImage(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                生成一张静态的地图图片
            </summary>
            <param name="center">中心点坐标，经度纬度用逗号分隔，与城市代码两者必选其一，中心点坐标优先。 </param>
            <param name="city">城市代码，与中心点坐标两者必选其一，中心点坐标优先</param>
            <param name="coordinates">地图上标点的坐标串，经度纬度用逗号分隔，多个坐标间用“|”分隔，最多不超过10个。示例：coordinates=120.0358,23.1014|116.0358,38.1014。 </param>
            <param name="names">地图上标点的名称串，多个名称用逗号分隔，最多不超过10个，数量必须与coordinates参数一致，超出的无效。</param>
            <param name="offsetX">x轴偏移方向，东移为正，西移为负，偏移单位为1/4图片宽度，示例：offset_x=1，地图向右移动1/4。 </param>
            <param name="offsetY">y轴偏移方向，北移为正，南移为负，偏移单位为1/4图片高度，示例：offset_y=1，地图向上移动1/4。 </param>
            <param name="font">字体格式，参数形式为：”字体,字体风格,字号,字体颜色,背景颜色,是否有背景“，其中是否有背景（0：无，1：有），示例：font=宋体,1,20,0XFF0C0C,0XFFFF00,1，默认值为“宋体,1,20,0XFF0CC0,0XFFFFE0,1”，字号最大不超过72号字，如果coordinates参数不存在则font参数无效。 </param>
            <param name="lines">在地图中画一条线，参数形式为：“线的颜色,线的宽度,线的拐点坐标”，拐点坐标经度纬度用逗号分隔，多个坐标间用“|”分隔，最多不超过10个，示例：lines=0XFF0000,2,116.32,39.96|116.12,39.96，取值范围为：线的宽度0-50。 </param>
            <param name="polygons">在地图中画一个多边形，参数形式为：“边框颜色,边框宽度,填充颜色,填充透明度,多边形的拐点坐标”，拐点坐标经度纬度用逗号分隔，多个坐标间用“|”分隔，最多不超过10个，示例：polygons=0XFF0000,1,0XFF0000,50,116.32,39.96|116.12,39.96|116.32,39.86，取值范围：边框宽度0-50，默认为1、填充透明度0（透明）-100（不透明），默认为50。 </param>
            <param name="size">生成的地图大小，格式为宽×高，最大值为800，默认为240，示例：size=480×360。 </param>
            <param name="format">生成的地图的图片格式，支持png、jpg等格式，参数全部为小写，默认为png。 </param>
            <param name="zoom">地图焦距等级，取值范围为1-17，默认为自适应大小。</param>
            <param name="scale">是否显示比例尺，true：是，false：否。 </param>
            <param name="traffic">是否需要叠加实际交通地图，true：是，false：否。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.IPtoGeo(System.String[])">
            <summary>
                根据IP地址返回地理信息坐标
            </summary>
            <param name="ips">需要获取坐标的IP地址，最多不超过10个。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.AddressToGeo(System.String)">
            <summary>
                根据实际地址返回地理信息坐标
            </summary>
            <param name="address">需要获取坐标的实际地址</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.GeoToAddress(System.String)">
            <summary>
                根据地理信息坐标返回实际地址
            </summary>
            <param name="coordinate">需要获取实际地址的坐标，经度纬度用逗号分隔。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.GpsToOffset(System.String)">
            <summary>
                根据GPS坐标获取偏移后的坐标
            </summary>
            <param name="coordinate">需要获取偏移坐标的源坐标，经度纬度用逗号分隔。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.IsDomestic(System.String)">
            <summary>
                判断地理信息坐标是否是国内坐标
            </summary>
            <param name="coordinates">需要判断的坐标，格式：经度,纬度,字符标识|经度,纬度,字符标识。其中经度纬度用逗号分隔，字符标识用于返回结果中的返回值标识。“|”分隔多个坐标。一次最多50个坐标。示例：coordinates=120.035847163,23.1014362572,g1|116.035847163,38.1014362572,g2。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.ShowPOIs(System.String[])">
            <summary>
                批量获取POI点的信息
            </summary>
            <param name="srcids">需要获取POI的来源ID，是由用户通过add接口自己提交的，最多不超过5个。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.SearchPOIsByLocation(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                根据关键词按地址位置获取POI点的信息
            </summary>
            <param name="q">查询的关键词，与category参数必选其一。</param>
            <param name="category">查询的分类代码，与q参数必选其一，取值范围见：分类代码对应表。 </param>
            <param name="city">城市代码，默认为全国搜索。 </param>
            <param name="page">返回结果的页码，默认为1，最大为40。 </param>
            <param name="count">单页返回的记录条数，默认为10，最大为20。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.SearchPOIsByGeo(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                根据关键词按坐标点范围获取POI点的信息
            </summary>
            <param name="q">查询的关键词，与category参数必选其一。</param>
            <param name="category">查询的分类代码，与q参数必选其一，取值范围见：分类代码对应表。 </param>
            <param name="coordinate">查询的中心点坐标，经度纬度用逗号分隔，与pid参数必选其一，pid优先。 </param>
            <param name="pid">查询的中心点POI的ID，与coordinate参数必选其一，pid优先。 </param>
            <param name="city">城市代码，默认为全国搜索。 </param>
            <param name="range">查询范围半径，默认为500，最大为500。 </param>
            <param name="page">返回结果的页码，默认为1，最大为40。 </param>
            <param name="count">单页返回的记录条数，默认为10，最大为20。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.SearchPOIsByArea(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                根据关键词按矩形区域获取POI点的信息
            </summary>
            <param name="q">查询的关键词，与category参数必选其一。</param>
            <param name="category">查询的分类代码，与q参数必选其一，取值范围见：分类代码对应表。 </param>
            <param name="coordinates">查询的矩形区域坐标，第一个坐标为左上角的点，第二个为右下角，经度纬度用逗号分隔，坐标间用“|”分隔，示例：coordinates=116.37,39.93|116.43,39.91。 </param>
            <param name="city">城市代码，默认为全国搜索。 </param>
            <param name="page">返回结果的页码，默认为1，最大为40。 </param>
            <param name="count">单页返回的记录条数，默认为10，最大为20。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.AddPOI(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                提交一个新增的POI点信息
            </summary>
            <param name="srcid">来源ID，用户自己设置，用于取回自己提交的POI信息，为2-8位的数字。 </param>
            <param name="name">POI点的名称，不超过30个字符</param>
            <param name="address">POI点的地址，不超过60个字符</param>
            <param name="cityName">POI点的城市中文名称，不超过30个字符</param>
            <param name="category">POI点的类别中文名称，不超过30个字符</param>
            <param name="longitude">POI点的经度，2-15个字符</param>
            <param name="latitude">POI点的维度，2-15个字符</param>
            <param name="phone">POI点的电话</param>
            <param name="picUrl">POI点的图片地址</param>
            <param name="url">POI点的网址</param>
            <param name="tags">POI点的标签，多个标签之间用逗号分隔，不超过60个字符</param>
            <param name="description">POI点的介绍，不超过120个字符</param>
            <param name="intro">POI点的其他特色信息，不超过120个字符，可以以JSON字符串方式提交</param>
            <param name="traffic">POI点的交通情况描述，不超过120个字符</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.GetLocationByMobileStation(System.String)">
            <summary>
                根据移动基站WIFI等数据获取当前位置信息
            </summary>
            <param name="json">特殊的JSON参数形式</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.DriveRouteLine(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                根据起点与终点数据查询自驾车路线信息
            </summary>
            <param name="beginPID">查询起点POI的ID，与begin_coordinate参数必选其一，begin_pid优先。</param>
            <param name="beginCoordinate">查询起点的坐标，经度纬度用逗号分隔，与begin_pid参数必选其一，begin_pid优先。 </param>
            <param name="endPID">查询终点POI的ID，与end_coordinate参数必选其一，end_pid优先。 </param>
            <param name="endCoordinate">查询终点的坐标，经度纬度用逗号分隔，与end_pid参数必选其一，end_pid优先。 </param>
            <param name="type">查询类型，0：速度优先、1：费用优先、2：距离优先，默认值为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.BusRouteLine(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                根据起点与终点数据查询公交乘坐路线信息
            </summary>
            <param name="beginPID">查询起点POI的ID，与begin_coordinate参数必选其一，begin_pid优先。</param>
            <param name="beginCoordinate">查询起点的坐标，经度纬度用逗号分隔，与begin_pid参数必选其一，begin_pid优先。 </param>
            <param name="endPID">查询终点POI的ID，与end_coordinate参数必选其一，end_pid优先。 </param>
            <param name="endCoordinate">查询终点的坐标，经度纬度用逗号分隔，与end_pid参数必选其一，end_pid优先。 </param>
            <param name="type">查询类型，0：速度优先、1：费用优先、2：距离优先，默认值为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.BusLine(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                根据关键词查询公交线路信息
            </summary>
            <param name="q">查询的关键词</param>
            <param name="city">城市代码，默认为北京搜索。 </param>
            <param name="page">返回结果的页码，默认为1，最大为40。 </param>
            <param name="count">单页返回的记录条数，默认为10，最大为50。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.LocationInterface.BusStation(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                根据关键词查询公交站点信息
            </summary>
            <param name="q">查询的关键词</param>
            <param name="city">城市代码，默认为北京搜索。 </param>
            <param name="page">返回结果的页码，默认为1，最大为40。 </param>
            <param name="count">单页返回的记录条数，默认为10，最大为50。 </param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.PlaceInterface">
            <summary>
                Place接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.PublicTimeline(System.Int32,System.Boolean)">
            <summary>
                获取最新20条公共的位置动态
            </summary>
            <param name="count">返回的动态数，最大为50，默认为20。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.FriendsTimeline(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户与其好友的位置动态
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。 </param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="type">关系过滤，0：仅返回关注的，1：返回好友的，默认为0</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.UserTimeline(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取某个用户的位置动态
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。 </param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，最大为50，默认为20。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.POITimeline(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取某个位置地点的动态
            </summary>
            <param name="poiID">需要查询的POI点ID</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0</param>
            <param name="count">单页返回的记录条数，最大为50，默认为20</param>
            <param name="page">返回结果的页码，默认为1</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.NearByTimeline(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                获取某个位置周边的动态
            </summary>
            <param name="lat">纬度。有效范围：-90.0到+90.0，+表示北纬。 </param>
            <param name="log">经度。有效范围：-180.0到+180.0，+表示东经。</param>
            <param name="range">搜索范围，单位米，默认2000米，最大11132米。 </param>
            <param name="startTime">开始时间，Unix时间戳</param>
            <param name="endTime">结束时间，Unix时间戳。 </param>
            <param name="sort">排序方式。默认为0，按时间排序；为1时按与中心点距离进行排序。 </param>
            <param name="count">单页返回的记录条数，最大为50，默认为20。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <param name="offset">传入的经纬度是否是纠偏过，0：没纠偏、1：纠偏过，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.StatusesShow(System.String)">
            <summary>
                根据ID获取动态的详情
            </summary>
            <param name="id">需要获取的动态ID。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.UsersShow(System.String,System.Boolean)">
            <summary>
                获取LBS位置服务内的用户信息
            </summary>
            <param name="uid">需要查询的用户ID。</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.UserCheckins(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户签到过的地点列表
            </summary>
            <param name="uid">需要查询的用户ID</param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.UserPhotos(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的照片列表
            </summary>
            <param name="uid">需要查询的用户ID。</param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.UserTips(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的点评列表
            </summary>
            <param name="uid">需要查询的用户ID</param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.UserTodos(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的todo列表
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.POIShow(System.String,System.Boolean)">
            <summary>
                获取地点详情
            </summary>
            <param name="poiID">需要查询的POI地点ID。</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.POIUsers(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取在某个地点签到的人的列表
            </summary>
            <param name="poiID">需要查询的POI地点ID。 </param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.POITips(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                获取地点点评列表
            </summary>
            <param name="poiID">需要查询的POI地点ID。</param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="sort">排序方式，0：按时间、1：按热门，默认为0，目前只支持0。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.POIPhotos(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                获取地点照片列表
            </summary>
            <param name="poiID">需要查询的POI地点ID。</param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="sort">排序方式，0：按时间、1：按热门，默认为0，目前只支持0。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.POISearch(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                按省市查询地点
            </summary>
            <param name="keyword">查询的关键词</param>
            <param name="city">城市代码，默认为全国搜索</param>
            <param name="category">查询的分类代码，取值范围见：分类代码对应表。</param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.POICategory(System.String,System.Boolean)">
            <summary>
                获取地点分类
            </summary>
            <param name="pid">父分类ID，默认为0。</param>
            <param name="flag">是否返回全部分类，0：只返回本级下的分类，1：返回全部分类，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.NearByPOIs(System.Single,System.Single,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                获取附近地点
            </summary>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬</param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经。 </param>
            <param name="range">查询范围半径，默认为2000，最大为10000，单位米。 </param>
            <param name="q">查询的关键词</param>
            <param name="category">查询的分类代码，取值范围见：分类代码对应表。 </param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="sort">排序方式，0：按权重，默认为0。 </param>
            <param name="offset">传入的经纬度是否是纠偏过，0：没纠偏、1：纠偏过，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.NearByUsers(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                获取附近发位置微博的人
            </summary>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬。 </param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经。 </param>
            <param name="range">查询范围半径，默认为2000，最大为11132，单位米。 </param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="startTime">开始时间，Unix时间戳。 </param>
            <param name="endTime">结束时间，Unix时间戳。 </param>
            <param name="sort">排序方式，0：按时间、1：按距离，默认为0。 </param>
            <param name="offset">传入的经纬度是否是纠偏过，0：没纠偏、1：纠偏过，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.NearByPhotos(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                获取附近照片
            </summary>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬。 </param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经。 </param>
            <param name="range">查询范围半径，默认为500，最大为11132，单位米。 </param>
            <param name="count">单页返回的记录条数，默认为20，最大为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="startTime">开始时间，Unix时间戳。 </param>
            <param name="endTime">结束时间，Unix时间戳。 </param>
            <param name="sort">排序方式，0：按时间、1：按距离，默认为0。 </param>
            <param name="offset">传入的经纬度是否是纠偏过，0：没纠偏、1：纠偏过，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.NearByUserList(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取附近的人
            </summary>
            <param name="lat">动态发生的纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。</param>
            <param name="log">动态发生的经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。 </param>
            <param name="count">单页返回的记录条数，最大为50，默认为20。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="range">查询范围半径，默认为2000，最大为11132。</param>
            <param name="sort">排序方式，0：按时间、1：按距离、2：按社会化关系，默认为2。</param>
            <param name="filter">用户关系过滤，0：全部、1：只返回陌生人、2：只返回关注人，默认为0。 </param>
            <param name="gender">性别过滤，0：全部、1：男、2：女，默认为0。</param>
            <param name="level">用户级别过滤，0：全部、1：普通用户、2：VIP用户、7：达人，默认为0。 </param>
            <param name="startAge">与参数endbirth一起定义过滤年龄段，数值为年龄大小，默认为空。 </param>
            <param name="endAge">与参数startbirth一起定义过滤年龄段，数值为年龄大小，默认为空。 </param>
            <param name="offset">传入的经纬度是否是纠偏过，0：没纠偏、1：纠偏过，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.CreatePOI(System.String,System.String,System.String,System.Single,System.Single,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                添加地点
            </summary>
            <param name="title">POI点的名称，不超过30个字符</param>
            <param name="address">POI点的地址，不超过60个字符</param>
            <param name="category">POI的类型分类代码，取值范围见：分类代码对应表，默认为500。</param>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬。 </param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经。 </param>
            <param name="city">城市代码。 </param>
            <param name="province">省份代码</param>
            <param name="country">国家代码</param>
            <param name="phone">POI点的电话，不超过14个字符</param>
            <param name="postcode">POI点的邮编</param>
            <param name="extra">其他</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.CheckIn(System.String,System.String,System.Byte[],System.Boolean)">
            <summary>
                签到同时可以上传一张图片
            </summary>
            <param name="poiID">需要签到的POI地点ID。</param>
            <param name="status">签到时发布的动态内容，内容不超过140个汉字</param>
            <param name="pic">需要上传的图片，仅支持JPEG、GIF、PNG格式，图片大小小于5M。</param>
            <param name="isPublic">是否同步到微博，1：是、0：否，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.AddPhoto(System.String,System.String,System.Byte[],System.Boolean)">
            <summary>
                添加照片
            </summary>
            <param name="poiID">需要添加照片的POI地点ID。 </param>
            <param name="status">签到时发布的动态内容，，内容不超过140个汉字</param>
            <param name="pic">需要上传的图片，仅支持JPEG、GIF、PNG格式，图片大小小于5M。 </param>
            <param name="isPublic">是否同步到微博，1：是、0：否，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.AddTip(System.String,System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="poiID">添加点评</param>
            <param name="status">点评时发布的动态内容，内容不超过140个汉字。 </param>
            <param name="isPublic">是否同步到微博，1：是、0：否，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.AddTodo(System.String,System.String,System.Boolean)">
            <summary>
                添加todo
            </summary>
            <param name="poiID">需要添加todo的POI地点ID。</param>
            <param name="status">添加todo时发布的动态内容，内容不超过140个汉字。</param>
            <param name="isPublic">是否同步到微博，1：是、0：否，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.CreateUserPosition(System.Single,System.Single)">
            <summary>
                用户添加自己的位置
            </summary>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬。 </param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.PlaceInterface.DestoryUserPostion">
            <summary>
                用户删除自己的位置
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.SearchInterface">
            <summary>
                Search接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SearchInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SearchInterface.Users(System.String,System.Int32)">
            <summary>
                搜索用户时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SearchInterface.Statuses(System.String,System.Int32)">
            <summary>
                搜索微博时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SearchInterface.Schools(System.String,System.Int32,System.Int32)">
            <summary>
                搜索学校时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10。 </param>
            <param name="type">学校类型，0：全部、1：大学、2：高中、3：中专技校、4：初中、5：小学，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SearchInterface.Companies(System.String,System.Int32)">
            <summary>
                搜索公司时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SearchInterface.Apps(System.String,System.Int32)">
            <summary>
                搜索应用时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SearchInterface.AtUsers(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                @用户时的联想建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10，粉丝最多1000，关注最多2000。 </param>
            <param name="type">联想类型，0：关注、1：粉丝。</param>
            <param name="range">联想范围，0：只联想关注人、1：只联想关注人的备注、2：全部，默认为2。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SearchInterface.Topics(System.String,System.Int32,System.Int32)">
            <summary>
                搜索某一话题下的微博
            </summary>
            <param name="q">搜索的话题关键字</param>
            <param name="count">单页返回的记录条数，默认为10，最大为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface">
            <summary>
                ShortUrl接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.Clicks(System.String)">
            <summary>
                获取短链接的总点击数
            </summary>
            <param name="url_short">需要取得点击数的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.Referers(System.String)">
            <summary>
                获取一个短链接点击的referer来源和数量
            </summary>
            <param name="url_short">需要取得点击来源的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.Locations(System.String)">
            <summary>
                获取一个短链接点击的地区来源和数量
            </summary>
            <param name="url_short">需要取得点击地区的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.Info(System.String[])">
            <summary>
                批量获取短链接的富内容信息
            </summary>
            <param name="url_short">需要获取富内容信息的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.Shorten(System.String[])">
            <summary>
                将一个或多个长链接转换成短链接
            </summary>
            <param name="url_long">需要转换的长链接，需要URLencoded，最多不超过20个。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.Expand(System.String[])">
            <summary>
                将一个或多个短链接还原成原始的长链接
            </summary>
            <param name="url_short">需要还原的短链接，需要URLencoded，最多不超过20个 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.ShareCounts(System.String[])">
            <summary>
                取得一个短链接在微博上的微博分享数（包含原创和转发的微博）
            </summary>
            <param name="url_short">需要取得分享数的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.ShareStatuses(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                取得包含指定单个短链接的最新微博内容
            </summary>
            <param name="urlShort">需要取得关联微博内容的短链接</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0 </param>
            <param name="maxID">指定此参数，则返回ID小于或等于max_id的微博，默认为0 </param>
            <param name="count">可选参数，返回结果的页序号，有分页限制</param>
            <param name="page">可选参数，每次返回的最大记录数（即页面大小），不大于200 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.CommentCounts(System.String[])">
            <summary>
                取得一个短链接在微博上的微博评论数
            </summary>
            <param name="url_short">需要取得评论数的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.ShortUrlInterface.CommentComments(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                取得包含指定单个短链接的最新微博评论内容
            </summary>
            <param name="urlShort">需要取得关联微博评论内容的短链接</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0 </param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0 </param>
            <param name="count">可选参数，每次返回的最大记录数（即页面大小），不大于200 </param>
            <param name="page">可选参数，返回结果的页序号，有分页限制</param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.StatusInterface">
            <summary>
                Status接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.PublicTimeline(System.Int32,System.Int32,System.Boolean)">
            <summary>
                返回最新的公共微博
            </summary>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <returns>dynamic json</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.FriendsTimeline(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取当前登录用户及其所关注用户的最新微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。</param>
            <returns>dynamic json</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.HomeTimeline(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取当前登录用户及其所关注用户的最新微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.FriendsTimelineIDs(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取当前登录用户及其所关注用户的最新微博的ID
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.UserTimeline(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                获取某个用户最新发表的微博列表
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="screenName">需要查询的用户昵称。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。 </param>
            <param name="trimUser">回值中user信息开关，0：返回完整的user信息、1：user字段仅返回user_id，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.UserTimelineIDs(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取用户发布的微博的ID
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="screenName">需要查询的用户昵称。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.RepostTimeline(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取指定微博的转发微博列表
            </summary>
            <param name="id">需要查询的微博ID。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.RepostTimelineIDs(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取一条原创微博的最新转发微博的ID
            </summary>
            <param name="id">需要查询的微博ID。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.RepostByMe(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取当前用户最新转发的微博列表
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。 </param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.Mentions(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取最新的提到登录用户的微博列表，即@我的微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博、2：来自微群，默认为0。 </param>
            <param name="filterByType">原创筛选类型，0：全部微博、1：原创的微博，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.MentionIDs(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取@当前用户的最新微博的ID
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博、2：来自微群，默认为0。 </param>
            <param name="filterByType">原创筛选类型，0：全部微博、1：原创的微博，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.BilateralTimeline(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取双向关注用户的最新微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.Show(System.String)">
            <summary>
                根据微博ID获取单条微博内容
            </summary>
            <param name="id">需要获取的微博ID。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.QueryMID(System.Int32,System.String[])">
            <summary>
                通过微博（评论、私信）ID获取其MID
            </summary>
            <param name="type">获取类型，1：微博、2：评论、3：私信，默认为1。 </param>
            <param name="ids">需要查询的微博（评论、私信）ID</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.QueryID(System.Int32,System.Boolean,System.Boolean,System.String[])">
            <summary>
                通过微博（评论、私信）MID获取其ID
            </summary>
            <param name="type">获取类型，1：微博、2：评论、3：私信，默认为1。</param>
            <param name="inbox">仅对私信有效，当MID类型为私信时用此参数，0：发件箱、1：收件箱，默认为0 。 </param>
            <param name="isBase62">MID是否是base62编码，0：否、1：是，默认为0。 </param>
            <param name="mids">需要查询的微博（评论、私信）MID，批量模式下，用半角逗号分隔，最多不超过20个。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.HotRepostDaily(System.Int32,System.Boolean)">
            <summary>
                按天返回热门转发榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.HotRepostWeekly(System.Int32,System.Boolean)">
            <summary>
                按周返回热门转发榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.HotCommentsDaily(System.Int32,System.Boolean)">
            <summary>
                按天返回热门评论榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.HotCommentsWeekly(System.Int32,System.Boolean)">
            <summary>
                按周返回热门评论榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.Count(System.String[])">
            <summary>
                批量获取指定微博的转发数评论数
            </summary>
            <param name="ids">需要获取数据的微博ID</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.Repost(System.String,System.String,System.Int32)">
            <summary>
                转发一条微博
            </summary>
            <param name="id">要转发的微博ID。 </param>
            <param name="status">添加的转发文本，内容不超过140个汉字，不填则默认为“转发微博”。 </param>
            <param name="isComment">是否在转发的同时发表评论，0：否、1：评论给当前微博、2：评论给原微博、3：都评论，默认为0 。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.Destroy(System.String)">
            <summary>
                根据微博ID删除指定微博
            </summary>
            <param name="id">需要删除的微博ID。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.Update(System.String,System.Single,System.Single,System.String)">
            <summary>
                发布一条新微博
            </summary>
            <param name="status">要发布的微博文本内容，必须做URLencode，内容不超过140个汉字。</param>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。</param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。 </param>
            <param name="annotations">元数据，主要是为了方便第三方应用记录一些适合于自己使用的信息，每条微博可以包含一个或者多个元数据，必须以json字串的形式提交，字串长度不超过512个字符，具体内容可以自定。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.Upload(System.String,System.Byte[],System.Single,System.Single,System.String)">
            <summary>
                上传图片并发布一条新微博
            </summary>
            <param name="status">要发布的微博文本内容，内容不超过140个汉字。 </param>
            <param name="pic">要上传的图片，仅支持JPEG、GIF、PNG格式，图片大小小于5M。</param>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。 </param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。 </param>
            <param name="annotations">元数据，主要是为了方便第三方应用记录一些适合于自己使用的信息，每条微博可以包含一个或者多个元数据，必须以json字串的形式提交，字串长度不超过512个字符，具体内容可以自定。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.UploadUrlText(System.String,System.String,System.Single,System.Single,System.String)">
            <summary>
                指定一个图片URL地址抓取后上传并同时发布一条新微博
            </summary>
            <param name="status">要发布的微博文本内容，内容不超过140个汉字。 </param>
            <param name="url">图片的URL地址，必须以http开头。</param>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。 </param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。 </param>
            <param name="annotations">元数据，主要是为了方便第三方应用记录一些适合于自己使用的信息，每条微博可以包含一个或者多个元数据，必须以json字串的形式提交，字串长度不超过512个字符，具体内容可以自定。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.StatusInterface.Emotions(NetDimension.Weibo.EmotionType,NetDimension.Weibo.LanguageType)">
            <summary>
            </summary>
            <param name="type">表情类别，face：普通表情、ani：魔法表情、cartoon：动漫表情，默认为face。 </param>
            <param name="language">语言类别，cnname：简体、twname：繁体，默认为cnname。 </param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.SuggestionInterface">
            <summary>
                Suggestion接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SuggestionInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SuggestionInterface.HotUsers(NetDimension.Weibo.HotUserCatagory)">
            <summary>
                获取系统推荐用户
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SuggestionInterface.MayInterestedUsers(System.Int32,System.Int32)">
            <summary>
                获取用户可能感兴趣的人
            </summary>
            <param name="count"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SuggestionInterface.UsersByStatus(System.String,System.Int32)">
            <summary>
                根据微博内容推荐用户
            </summary>
            <param name="content"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SuggestionInterface.HotStatuses(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
                获取微博精选推荐
            </summary>
            <param name="type">微博精选分类，1：娱乐、2：搞笑、3：美女、4：视频、5：星座、6：各种萌、7：时尚、8：名车、9：美食、10：音乐。 </param>
            <param name="isPic">是否返回图片精选微博，0：全部、1：图片微博。 </param>
            <param name="count">单页返回的记录条数，默认为20。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SuggestionInterface.ReorderStatuses(System.Int32,System.Int32,System.Int32)">
            <summary>
                当前登录用户的friends_timeline微博按兴趣推荐排序
            </summary>
            <param name="section">排序时间段，距现在n秒内的微博参加排序，最长支持24小时。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SuggestionInterface.ReorderStatusIDs(System.Int32,System.Int32,System.Int32)">
            <summary>
                主Feed微博按兴趣推荐排序的微博ID
            </summary>
            <param name="section">排序时间段，距现在n秒内的微博参加排序，最长支持24小时。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SuggestionInterface.HotFavorites(System.Int32,System.Int32)">
            <summary>
                热门收藏
            </summary>
            <param name="count"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.SuggestionInterface.NotInterestedUsers(System.String)">
            <summary>
                把某人标识为不感兴趣的人
            </summary>
            <param name="uid">不感兴趣的用户的UID。 </param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.TagInterface">
            <summary>
                Tag接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TagInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TagInterface.Tags(System.String,System.Int32,System.Int32)">
            <summary>
                返回指定用户的标签列表
            </summary>
            <param name="uid">要获取的标签列表所属的用户ID。 </param>
            <param name="count">单页返回的记录条数，默认为20。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TagInterface.TagsBatch(System.String[])">
            <summary>
                批量获取用户的标签列表
            </summary>
            <param name="uids">要获取标签的用户ID。最大20，逗号分隔。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TagInterface.Suggestions(System.Int32)">
            <summary>
                获取系统推荐的标签列表
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TagInterface.Create(System.String[])">
            <summary>
                为当前登录用户添加新的用户标签
            </summary>
            <param name="tags">要创建的一组标签，每个标签的长度不可超过7个汉字，14个半角字符。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TagInterface.Destroy(System.String)">
            <summary>
                删除用户标签
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TagInterface.DestroyBatch(System.String[])">
            <summary>
                批量删除用户标签
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.TrendInterface">
            <summary>
                Trend接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TrendInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TrendInterface.Trends(System.String,System.Int32,System.Int32)">
            <summary>
                获取某人话题
            </summary>
            <param name="uid"></param>
            <param name="count"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TrendInterface.IsFollow(System.String)">
            <summary>
                是否关注某话题
            </summary>
            <param name="trendName"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TrendInterface.Hourly(System.Boolean)">
            <summary>
                返回最近一小时内的热门话题。
            </summary>
            <param name="baseApp">是否基于当前应用来获取数据。true表示基于当前应用来获取数据。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TrendInterface.Daily(System.Boolean)">
            <summary>
                返回最近一天内的热门话题。
            </summary>
            <param name="baseApp">是否基于当前应用来获取数据。true表示基于当前应用来获取数据。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TrendInterface.Weekly(System.Boolean)">
            <summary>
                返回最近一周内的热门话题。
            </summary>
            <param name="baseApp">是否基于当前应用来获取数据。true表示基于当前应用来获取数据。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TrendInterface.Follow(System.String)">
            <summary>
                关注某话题
            </summary>
            <param name="trendName"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.TrendInterface.Destroy(System.String)">
            <summary>
                取消关注的某一个话题
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Dynamic.UserInterface">
            <summary>
                User接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.UserInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类实例</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.UserInterface.Show(System.String,System.String)">
            <summary>
                获取用户信
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.UserInterface.ShowByDomain(System.String)">
            <summary>
                通过个性化域名获取用户资料以及用户最新的一条微博
            </summary>
            <param name="domain">需要查询的个性化域名。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Dynamic.UserInterface.Counts(System.String[])">
            <summary>
                批量获取用户的粉丝数、关注数、微博数
            </summary>
            <param name="uids"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.AccountInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.AccountInterface.GetPrivacy">
            <summary>
                获取当前登录用户的隐私设置
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.AccountInterface.SchoolList(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                获取所有的学校列表
            </summary>
            <param name="province">省份范围，省份ID。</param>
            <param name="city">城市范围，城市ID。</param>
            <param name="area">区域范围，区ID。</param>
            <param name="type">学校类型，1：大学、2：高中、3：中专技校、4：初中、5：小学，默认为1。</param>
            <param name="capital">学校首字母，默认为A。 </param>
            <param name="keyword">学校名称关键字。</param>
            <param name="count">返回的记录条数，默认为10。</param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.AccountInterface.RateLimitStatus">
            <summary>
                获取当前登录用户的API访问频率限制情况
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.AccountInterface.GetUID">
            <summary>
                OAuth授权之后，获取授权用户的UID
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.AccountInterface.EndSession">
            <summary>
                退出登录
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.AccountInterface.VerifyNickname(System.String)">
            <summary>
                验证昵称是否可用，并给予建议昵称
            </summary>
            <param name="nickname">需要验证的昵称。4-20个字符，支持中英文、数字、"_"或减号。必须做URLEncode，采用UTF-8编码。 </param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.AccountInterface.UnreadCount(System.String,System.String)">
            <summary>
                获取某个用户的各种消息未读数
            </summary>
            <param name="uid">需要获取消息未读数的用户UID，必须是当前登录用户。</param>
            <param name="callback">JSONP回调函数，用于前端调用返回JS格式的信息。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.AccountInterface.SetCount(NetDimension.Weibo.ResetCountType)">
            <summary>
                对当前登录用户某一种消息未读数进行清零
            </summary>
            <param name="type">需要清零未读数的消息项，status：新微博数、follower：新粉丝数、cmt：新评论数、dm：新私信数、mention_status：新提及我的微博数、mention_cmt：新提及我的评论数，一次只能操作一项。 </param>
            <returns>JSON</returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.CommentInterface">
            <summary>
                Comment接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.Show(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                根据微博ID返回某条微博的评论列表
            </summary>
            <param name="id">需要查询的微博ID。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。</param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.ByMe(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户所发出的评论列表
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.ToMe(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户所接收到的评论列表
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.Timeline(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的最新评论包括接收到的与发出的
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns>JSON</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.Mentions(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取最新的提到当前登录用户的评论，即@我的评论
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.ShowBatch(System.String[])">
            <summary>
                根据评论ID批量返回评论信息
            </summary>
            <param name="cids">需要查询的批量评论ID，最大50。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.Create(System.String,System.String,System.Boolean)">
            <summary>
                对一条微博进行评论
            </summary>
            <param name="id">需要评论的微博ID。</param>
            <param name="comment">评论内容，必须做URLencode，内容不超过140个汉字。 </param>
            <param name="commentOrigin">当评论转发微博时，是否评论给原微博，0：否、1：是，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.Destroy(System.String)">
            <summary>
                删除一条评论
            </summary>
            <param name="cid">要删除的评论ID，只能删除登录用户自己发布的评论。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.DestroyBatch(System.String[])">
            <summary>
                根据评论ID批量删除评论
            </summary>
            <param name="ids">需要删除的评论ID，最多20个。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommentInterface.Reply(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                回复一条评论
            </summary>
            <param name="cid">需要回复的评论ID。</param>
            <param name="id">需要评论的微博ID。</param>
            <param name="comment">回复评论内容，必须做URLencode，内容不超过140个汉字。 </param>
            <param name="withoutMention">回复中是否自动加入“回复@用户名”，0：是、1：否，默认为0。 </param>
            <param name="commentOrigin">当评论转发微博时，是否评论给原微博，0：否、1：是，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.CommonInterface">
            <summary>
                Common接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommonInterface.CodeToLocation(System.String[])">
            <summary>
                通过地址编码获取地址名称
            </summary>
            <param name="codes">需要查询的地址编码</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommonInterface.GetCity(System.String,System.String)">
            <summary>
                获取城市列表
            </summary>
            <param name="province">省份的省份代码。</param>
            <param name="capital">城市的首字母，a-z，可为空代表返回全部，默认为全部。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommonInterface.GetProvince(System.String,System.String)">
            <summary>
                获取省份列表
            </summary>
            <param name="country">国家的国家代码。</param>
            <param name="capital">省份的首字母，a-z，可为空代表返回全部，默认为全部。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommonInterface.GetCountry(System.String)">
            <summary>
                获取国家列表
            </summary>
            <param name="capital">国家的首字母，a-z，可为空代表返回全部，默认为全部。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.CommonInterface.GetTimezone">
            <summary>
                获取时区配置表
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.FavoriteInterface">
            <summary>
                Favorite接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.Favorites(System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的收藏列表
            </summary>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.FavoriteIDs(System.Int32,System.Int32)">
            <summary>
                获取当前用户的收藏列表的ID
            </summary>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.Show(System.String)">
            <summary>
                根据收藏ID获取指定的收藏信息
            </summary>
            <param name="id">需要查询的收藏ID。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.ByTags(System.String,System.Int32,System.Int32)">
            <summary>
                根据标签获取当前登录用户该标签下的收藏列表
            </summary>
            <param name="tid">需要查询的标签ID。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.Tags(System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的收藏标签列表
            </summary>
            <param name="count">单页返回的记录条数，默认为10。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.ByTagIDs(System.String,System.Int32,System.Int32)">
            <summary>
                获取当前用户某个标签下的收藏列表的ID
            </summary>
            <param name="tid">需要查询的标签ID。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.Create(System.String)">
            <summary>
                添加一条微博到收藏里
            </summary>
            <param name="id">要收藏的微博ID。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.Destroy(System.String)">
            <summary>
                取消收藏一条微博
            </summary>
            <param name="id">要取消收藏的微博ID。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.DestroyBatch(System.String[])">
            <summary>
                根据收藏ID批量取消收藏
            </summary>
            <param name="ids">要取消收藏的收藏ID最多不超过10个。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.UpdateTags(System.String,System.String[])">
            <summary>
                更新一条收藏的收藏标签
            </summary>
            <param name="id">需要更新的收藏ID。</param>
            <param name="tags">需要更新的标签内容，最多不超过2条。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.UpdateTagsBatch(System.String,System.String)">
            <summary>
                更新当前登录用户所有收藏下的指定标签
            </summary>
            <param name="tid">需要更新的标签ID</param>
            <param name="tag">需要更新的标签内容</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FavoriteInterface.DestroyTags(System.String[])">
            <summary>
                删除当前登录用户所有收藏下的指定标签
            </summary>
            <param name="tid">需要删除的标签ID</param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.FriendshipInterface">
            <summary>
                Friendship接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.Friends(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的关注列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为50，最大不超过200。</param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。</param>
            ///
            <param name="trimStatus">返回值中user字段中的status字段开关，0：返回完整status字段、1：status字段仅返回status_id，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.FriendIDs(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取用户关注的用户UID列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为500，最大不超过5000。 </param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.FriendsInCommon(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取两个用户之间的共同关注人列表
            </summary>
            <param name="uid">需要获取共同关注关系的用户UID。</param>
            <param name="suid">需要获取共同关注关系的用户UID，默认为当前登录用户。</param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.FriendsOnBilateral(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的双向关注列表，即互粉列表
            </summary>
            <param name="uid">需要获取双向关注列表的用户UID。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="sort">排序类型，0：按关注时间最近排序，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.FriendsOnBilateralIDs(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户双向关注的用户ID列表，即互粉UID列表
            </summary>
            <param name="uid">需要获取双向关注列表的用户UID。</param>
            <param name="count">单页返回的记录条数，默认为50，最大不超过2000。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="sort">排序类型，0：按关注时间最近排序，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.Followers(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的粉丝列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为50，最大不超过200。</param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。</param>
            <param name="trimStatus">返回值中user字段中的status字段开关，0：返回完整status字段、1：status字段仅返回status_id，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.FollowerIDs(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取用户粉丝的用户UID列表
            </summary>
            <param name="uid">需要查询的用户UID。</param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为500，最大不超过5000。</param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.FollowersInActive(System.String,System.Int32)">
            <summary>
                获取用户的活跃粉丝列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="count">返回的记录条数，默认为20，最大不超过200。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.FriendsChain(System.String,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的关注人中又关注了指定用户的用户列表
            </summary>
            <param name="uid">指定的关注目标用户UID。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.Show(System.String,System.String,System.String,System.String)">
            <summary>
                获取两个用户之间的详细关注关系情况
            </summary>
            <param name="sourceID">源用户的UID。</param>
            <param name="sourceScreenName">源用户的微博昵称。 </param>
            <param name="targetID">目标用户的UID。 </param>
            <param name="targetScreenName">目标用户的微博昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.Create(System.String,System.String)">
            <summary>
                关注一个用户
            </summary>
            <param name="uid">需要关注的用户ID。</param>
            <param name="screenName">需要关注的用户昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.Destroy(System.String,System.String)">
            <summary>
                取消关注一个用户
            </summary>
            <param name="uid">需要取消关注的用户ID。</param>
            <param name="screenName">需要取消关注的用户昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.FriendshipInterface.UpdateRemark(System.String,System.String)">
            <summary>
                更新当前登录用户所关注的某个好友的备注信息
            </summary>
            <param name="uid">需要修改备注信息的用户UID。 </param>
            <param name="remark">备注信息</param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.SearchInterface">
            <summary>
                Search接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SearchInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SearchInterface.Users(System.String,System.Int32)">
            <summary>
                搜索用户时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SearchInterface.Statuses(System.String,System.Int32)">
            <summary>
                搜索微博时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SearchInterface.Schools(System.String,System.Int32,System.Int32)">
            <summary>
                搜索学校时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10。 </param>
            <param name="type">学校类型，0：全部、1：大学、2：高中、3：中专技校、4：初中、5：小学，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SearchInterface.Companies(System.String,System.Int32)">
            <summary>
                搜索公司时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SearchInterface.Apps(System.String,System.Int32)">
            <summary>
                搜索应用时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SearchInterface.AtUsers(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                @用户时的联想建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10，粉丝最多1000，关注最多2000。 </param>
            <param name="type">联想类型，0：关注、1：粉丝。</param>
            <param name="range">联想范围，0：只联想关注人、1：只联想关注人的备注、2：全部，默认为2。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SearchInterface.Topics(System.String,System.Int32,System.Int32)">
            <summary>
                搜索某一话题下的微博
            </summary>
            <param name="q">搜索的话题关键字</param>
            <param name="count">单页返回的记录条数，默认为10，最大为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.ShortUrlInterface">
            <summary>
                ShortUrl接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.Clicks(System.String)">
            <summary>
                获取短链接的总点击数
            </summary>
            <param name="url_short">需要取得点击数的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.Referers(System.String)">
            <summary>
                获取一个短链接点击的referer来源和数量
            </summary>
            <param name="url_short">需要取得点击来源的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.Locations(System.String)">
            <summary>
                获取一个短链接点击的地区来源和数量
            </summary>
            <param name="url_short">需要取得点击地区的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.Info(System.String[])">
            <summary>
                批量获取短链接的富内容信息
            </summary>
            <param name="url_short">需要获取富内容信息的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.Shorten(System.String[])">
            <summary>
                将一个或多个长链接转换成短链接
            </summary>
            <param name="url_long">需要转换的长链接，需要URLencoded，最多不超过20个。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.Expand(System.String[])">
            <summary>
                将一个或多个短链接还原成原始的长链接
            </summary>
            <param name="url_short">需要还原的短链接，需要URLencoded，最多不超过20个 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.ShareCounts(System.String[])">
            <summary>
                取得一个短链接在微博上的微博分享数（包含原创和转发的微博）
            </summary>
            <param name="url_short">需要取得分享数的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.ShareStatuses(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                取得包含指定单个短链接的最新微博内容
            </summary>
            <param name="urlShort">需要取得关联微博内容的短链接</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0 </param>
            <param name="maxID">指定此参数，则返回ID小于或等于max_id的微博，默认为0 </param>
            <param name="count">可选参数，返回结果的页序号，有分页限制</param>
            <param name="page">可选参数，每次返回的最大记录数（即页面大小），不大于200 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.CommentCounts(System.String[])">
            <summary>
                取得一个短链接在微博上的微博评论数
            </summary>
            <param name="url_short">需要取得评论数的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.ShortUrlInterface.CommentComments(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                取得包含指定单个短链接的最新微博评论内容
            </summary>
            <param name="urlShort">需要取得关联微博评论内容的短链接</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0 </param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0 </param>
            <param name="count">可选参数，每次返回的最大记录数（即页面大小），不大于200 </param>
            <param name="page">可选参数，返回结果的页序号，有分页限制</param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.StatusInterface">
            <summary>
                Status接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NetDimension.Weibo.Interface.Entity.StatusInterface.PublicTimeline(System.Int32,System.Int32,System.Boolean)" -->
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.FriendsTimeline(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取当前登录用户及其所关注用户的最新微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。</param>
            <returns>dynamic json</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.HomeTimeline(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取当前登录用户及其所关注用户的最新微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.FriendsTimelineIDs(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取当前登录用户及其所关注用户的最新微博的ID
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.UserTimeline(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                获取某个用户最新发表的微博列表
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="screenName">需要查询的用户昵称。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。 </param>
            <param name="trimUser">回值中user信息开关，0：返回完整的user信息、1：user字段仅返回user_id，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.UserTimelineIDs(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取用户发布的微博的ID
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="screenName">需要查询的用户昵称。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.RepostTimeline(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取指定微博的转发微博列表
            </summary>
            <param name="id">需要查询的微博ID。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.RepostTimelineIDs(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取一条原创微博的最新转发微博的ID
            </summary>
            <param name="id">需要查询的微博ID。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.RepostByMe(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取当前用户最新转发的微博列表
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。 </param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.Mentions(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取最新的提到登录用户的微博列表，即@我的微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博、2：来自微群，默认为0。 </param>
            <param name="filterByType">原创筛选类型，0：全部微博、1：原创的微博，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.MentionIDs(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取@当前用户的最新微博的ID
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博、2：来自微群，默认为0。 </param>
            <param name="filterByType">原创筛选类型，0：全部微博、1：原创的微博，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.BilateralTimeline(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取双向关注用户的最新微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.Show(System.String)">
            <summary>
                根据微博ID获取单条微博内容
            </summary>
            <param name="id">需要获取的微博ID。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.QueryMID(System.Int32,System.String)">
            <summary>
                通过微博（评论、私信）ID获取其MID
            </summary>
            <param name="type">获取类型，1：微博、2：评论、3：私信，默认为1。 </param>
            <param name="id">需要查询的微博（评论、私信）ID</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.QueryMID(System.Int32,System.String[])">
            <summary>
                通过微博（评论、私信）ID获取其MID
            </summary>
            <param name="type">获取类型，1：微博、2：评论、3：私信，默认为1。 </param>
            <param name="ids">需要查询的微博（评论、私信）ID</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.QueryID(System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
                通过微博（评论、私信）MID获取其ID
            </summary>
            <param name="type">获取类型，1：微博、2：评论、3：私信，默认为1。</param>
            <param name="inbox">仅对私信有效，当MID类型为私信时用此参数，0：发件箱、1：收件箱，默认为0 。 </param>
            <param name="isBase62">MID是否是base62编码，0：否、1：是，默认为0。 </param>
            <param name="mids">需要查询的微博（评论、私信）MID，批量模式下，用半角逗号分隔，最多不超过20个。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.QueryID(System.Int32,System.Boolean,System.Boolean,System.String[])">
            <summary>
                通过微博（评论、私信）MID获取其ID
            </summary>
            <param name="type">获取类型，1：微博、2：评论、3：私信，默认为1。</param>
            <param name="inbox">仅对私信有效，当MID类型为私信时用此参数，0：发件箱、1：收件箱，默认为0 。 </param>
            <param name="isBase62">MID是否是base62编码，0：否、1：是，默认为0。 </param>
            <param name="mids">需要查询的微博（评论、私信）MID，批量模式下，用半角逗号分隔，最多不超过20个。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.HotRepostDaily(System.Int32,System.Boolean)">
            <summary>
                按天返回热门转发榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.HotRepostWeekly(System.Int32,System.Boolean)">
            <summary>
                按周返回热门转发榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.HotCommentsDaily(System.Int32,System.Boolean)">
            <summary>
                按天返回热门评论榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.HotCommentsWeekly(System.Int32,System.Boolean)">
            <summary>
                按周返回热门评论榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.Count(System.String[])">
            <summary>
                批量获取指定微博的转发数评论数
            </summary>
            <param name="ids">需要获取数据的微博ID</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.Repost(System.String,System.String,System.Int32)">
            <summary>
                转发一条微博
            </summary>
            <param name="id">要转发的微博ID。 </param>
            <param name="status">添加的转发文本，内容不超过140个汉字，不填则默认为“转发微博”。 </param>
            <param name="isComment">是否在转发的同时发表评论，0：否、1：评论给当前微博、2：评论给原微博、3：都评论，默认为0 。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.Destroy(System.String)">
            <summary>
                根据微博ID删除指定微博
            </summary>
            <param name="id">需要删除的微博ID。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.Update(System.String,System.Single,System.Single,System.String)">
            <summary>
                发布一条新微博
            </summary>
            <param name="status">要发布的微博文本内容，必须做URLencode，内容不超过140个汉字。</param>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。</param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。 </param>
            <param name="annotations">元数据，主要是为了方便第三方应用记录一些适合于自己使用的信息，每条微博可以包含一个或者多个元数据，必须以json字串的形式提交，字串长度不超过512个字符，具体内容可以自定。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.Upload(System.String,System.Byte[],System.Single,System.Single,System.String)">
            <summary>
                上传图片并发布一条新微博
            </summary>
            <param name="status">要发布的微博文本内容，内容不超过140个汉字。 </param>
            <param name="pic">要上传的图片，仅支持JPEG、GIF、PNG格式，图片大小小于5M。</param>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。 </param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。 </param>
            <param name="annotations">元数据，主要是为了方便第三方应用记录一些适合于自己使用的信息，每条微博可以包含一个或者多个元数据，必须以json字串的形式提交，字串长度不超过512个字符，具体内容可以自定。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.UploadUrlText(System.String,System.String,System.Single,System.Single,System.String)">
            <summary>
                指定一个图片URL地址抓取后上传并同时发布一条新微博
            </summary>
            <param name="status">要发布的微博文本内容，内容不超过140个汉字。 </param>
            <param name="url">图片的URL地址，必须以http开头。</param>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。 </param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。 </param>
            <param name="annotations">元数据，主要是为了方便第三方应用记录一些适合于自己使用的信息，每条微博可以包含一个或者多个元数据，必须以json字串的形式提交，字串长度不超过512个字符，具体内容可以自定。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.StatusInterface.Emotions(NetDimension.Weibo.EmotionType,NetDimension.Weibo.LanguageType)">
            <summary>
            </summary>
            <param name="type">表情类别，face：普通表情、ani：魔法表情、cartoon：动漫表情，默认为face。 </param>
            <param name="language">语言类别，cnname：简体、twname：繁体，默认为cnname。 </param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.SuggestionInterface">
            <summary>
                Suggestion接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SuggestionInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SuggestionInterface.HotUsers(NetDimension.Weibo.HotUserCatagory)">
            <summary>
                获取系统推荐用户
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SuggestionInterface.MayInterestedUsers(System.Int32,System.Int32)">
            <summary>
                获取用户可能感兴趣的人
            </summary>
            <param name="count"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SuggestionInterface.UsersByStatus(System.String,System.Int32)">
            <summary>
                根据微博内容推荐用户
            </summary>
            <param name="content"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SuggestionInterface.HotStatuses(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
                获取微博精选推荐
            </summary>
            <param name="type">微博精选分类，1：娱乐、2：搞笑、3：美女、4：视频、5：星座、6：各种萌、7：时尚、8：名车、9：美食、10：音乐。 </param>
            <param name="isPic">是否返回图片精选微博，0：全部、1：图片微博。 </param>
            <param name="count">单页返回的记录条数，默认为20。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SuggestionInterface.ReorderStatuses(System.Int32,System.Int32,System.Int32)">
            <summary>
                当前登录用户的friends_timeline微博按兴趣推荐排序
            </summary>
            <param name="section">排序时间段，距现在n秒内的微博参加排序，最长支持24小时。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SuggestionInterface.ReorderStatusIDs(System.Int32,System.Int32,System.Int32)">
            <summary>
                主Feed微博按兴趣推荐排序的微博ID
            </summary>
            <param name="section">排序时间段，距现在n秒内的微博参加排序，最长支持24小时。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SuggestionInterface.HotFavorites(System.Int32,System.Int32)">
            <summary>
                热门收藏
            </summary>
            <param name="count"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.SuggestionInterface.NotInterestedUsers(System.String)">
            <summary>
                把某人标识为不感兴趣的人
            </summary>
            <param name="uid">不感兴趣的用户的UID。 </param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.TagInterface">
            <summary>
                Tag接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TagInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TagInterface.Tags(System.String,System.Int32,System.Int32)">
            <summary>
                返回指定用户的标签列表
            </summary>
            <param name="uid">要获取的标签列表所属的用户ID。 </param>
            <param name="count">单页返回的记录条数，默认为20。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TagInterface.TagsBatch(System.String[])">
            <summary>
                批量获取用户的标签列表
            </summary>
            <param name="uids">要获取标签的用户ID。最大20，逗号分隔。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TagInterface.Suggestions(System.Int32)">
            <summary>
                获取系统推荐的标签列表
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TagInterface.Create(System.String[])">
            <summary>
                为当前登录用户添加新的用户标签
            </summary>
            <param name="tags">要创建的一组标签，每个标签的长度不可超过7个汉字，14个半角字符。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TagInterface.Destroy(System.String)">
            <summary>
                删除用户标签
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TagInterface.DestroyBatch(System.String[])">
            <summary>
                批量删除用户标签
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.TrendInterface">
            <summary>
                Trend接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TrendInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TrendInterface.Trends(System.String,System.Int32,System.Int32)">
            <summary>
                获取某人话题
            </summary>
            <param name="uid"></param>
            <param name="count"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TrendInterface.IsFollow(System.String)">
            <summary>
                是否关注某话题
            </summary>
            <param name="trendName"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TrendInterface.Hourly(System.Boolean)">
            <summary>
                返回最近一小时内的热门话题。
            </summary>
            <param name="baseApp">是否基于当前应用来获取数据。true表示基于当前应用来获取数据。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TrendInterface.Daily(System.Boolean)">
            <summary>
                返回最近一天内的热门话题。
            </summary>
            <param name="baseApp">是否基于当前应用来获取数据。true表示基于当前应用来获取数据。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TrendInterface.Weekly(System.Boolean)">
            <summary>
                返回最近一周内的热门话题。
            </summary>
            <param name="baseApp">是否基于当前应用来获取数据。true表示基于当前应用来获取数据。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TrendInterface.Follow(System.String)">
            <summary>
                关注某话题
            </summary>
            <param name="trendName"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.TrendInterface.Destroy(System.String)">
            <summary>
                取消关注的某一个话题
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.Entity.UserInterface">
            <summary>
                User接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.UserInterface.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作类实例</param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.UserInterface.Show(System.String,System.String)">
            <summary>
                获取用户信
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.UserInterface.ShowByDomain(System.String)">
            <summary>
                通过个性化域名获取用户资料以及用户最新的一条微博
            </summary>
            <param name="domain">需要查询的个性化域名。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.Entity.UserInterface.Counts(System.String[])">
            <summary>
                批量获取用户的粉丝数、关注数、微博数
            </summary>
            <param name="uids"></param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.EntityInterfaces">
            <summary>
                实体类型类型API接口封装
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.EntityInterfaces.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造函数
            </summary>
            <param name="client">操作器</param>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Account">
            <summary>
                账号接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Comments">
            <summary>
                评论接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Common">
            <summary>
                公共服务接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Favorites">
            <summary>
                收藏接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Friendships">
            <summary>
                关系接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Search">
            <summary>
                搜索接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.ShortUrl">
            <summary>
                锻练接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Statuses">
            <summary>
                微博接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Suggestions">
            <summary>
                推荐接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Tags">
            <summary>
                标签接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Trends">
            <summary>
                话题接口
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.EntityInterfaces.Users">
            <summary>
                用户接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.Favorites(System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的收藏列表
            </summary>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.FavoriteIDs(System.Int32,System.Int32)">
            <summary>
                获取当前用户的收藏列表的ID
            </summary>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.Show(System.String)">
            <summary>
                根据收藏ID获取指定的收藏信息
            </summary>
            <param name="id">需要查询的收藏ID。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.ByTags(System.String,System.Int32,System.Int32)">
            <summary>
                根据标签获取当前登录用户该标签下的收藏列表
            </summary>
            <param name="tid">需要查询的标签ID。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.Tags(System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的收藏标签列表
            </summary>
            <param name="count">单页返回的记录条数，默认为10。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.ByTagIDs(System.String,System.Int32,System.Int32)">
            <summary>
                获取当前用户某个标签下的收藏列表的ID
            </summary>
            <param name="tid">需要查询的标签ID。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.Create(System.String)">
            <summary>
                添加一条微博到收藏里
            </summary>
            <param name="id">要收藏的微博ID。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.Destroy(System.String)">
            <summary>
                取消收藏一条微博
            </summary>
            <param name="id">要取消收藏的微博ID。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.DestroyBatch(System.String[])">
            <summary>
                根据收藏ID批量取消收藏
            </summary>
            <param name="ids">要取消收藏的收藏ID最多不超过10个。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.UpdateTags(System.String,System.String[])">
            <summary>
                更新一条收藏的收藏标签
            </summary>
            <param name="id">需要更新的收藏ID。</param>
            <param name="tags">需要更新的标签内容，最多不超过2条。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.UpdateTagsBatch(System.String,System.String)">
            <summary>
                更新当前登录用户所有收藏下的指定标签
            </summary>
            <param name="tid">需要更新的标签ID</param>
            <param name="tag">需要更新的标签内容</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FavoriteAPI.DestroyTags(System.String[])">
            <summary>
                删除当前登录用户所有收藏下的指定标签
            </summary>
            <param name="tid">需要删除的标签ID</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.Friends(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的关注列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为50，最大不超过200。</param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.FriendIDs(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取用户关注的用户UID列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为500，最大不超过5000。 </param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.FriendsInCommon(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取两个用户之间的共同关注人列表
            </summary>
            <param name="uid">需要获取共同关注关系的用户UID。</param>
            <param name="suid">需要获取共同关注关系的用户UID，默认为当前登录用户。</param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.FriendsOnBilateral(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的双向关注列表，即互粉列表
            </summary>
            <param name="uid">需要获取双向关注列表的用户UID。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="sort">排序类型，0：按关注时间最近排序，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.FriendsOnBilateralIDs(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户双向关注的用户ID列表，即互粉UID列表
            </summary>
            <param name="uid">需要获取双向关注列表的用户UID。</param>
            <param name="count">单页返回的记录条数，默认为50，最大不超过2000。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="sort">排序类型，0：按关注时间最近排序，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.Followers(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取用户的粉丝列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为50，最大不超过200。</param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。</param>
            <param name="trimStatus">返回值中user字段中的status字段开关，0：返回完整status字段、1：status字段仅返回status_id，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.FollowerIDs(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取用户粉丝的用户UID列表
            </summary>
            <param name="uid">需要查询的用户UID。</param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <param name="count">单页返回的记录条数，默认为500，最大不超过5000。</param>
            <param name="cursor">返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.FollowersInActive(System.String,System.Int32)">
            <summary>
                获取用户的活跃粉丝列表
            </summary>
            <param name="uid">需要查询的用户UID。 </param>
            <param name="count">返回的记录条数，默认为20，最大不超过200。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.FriendsChain(System.String,System.Int32,System.Int32)">
            <summary>
                获取当前登录用户的关注人中又关注了指定用户的用户列表
            </summary>
            <param name="uid">指定的关注目标用户UID。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.Show(System.String,System.String,System.String,System.String)">
            <summary>
                获取两个用户之间的详细关注关系情况
            </summary>
            <param name="sourceID">源用户的UID。</param>
            <param name="sourceScreenName">源用户的微博昵称。 </param>
            <param name="targetID">目标用户的UID。 </param>
            <param name="targetScreenName">目标用户的微博昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.Create(System.String,System.String)">
            <summary>
                关注一个用户
            </summary>
            <param name="uid">需要关注的用户ID。</param>
            <param name="screenName">需要关注的用户昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.Destroy(System.String,System.String)">
            <summary>
                取消关注一个用户
            </summary>
            <param name="uid">需要取消关注的用户ID。</param>
            <param name="screenName">需要取消关注的用户昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.FriendshipAPI.UpdateRemark(System.String,System.String)">
            <summary>
                更新当前登录用户所关注的某个好友的备注信息
            </summary>
            <param name="uid">需要修改备注信息的用户UID。 </param>
            <param name="remark">备注信息</param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.Interface.InterfaceSelector">
            <summary>
                接口选择器
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.InterfaceSelector.Dynamic">
            <summary>
                动态类型API调用
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Interface.InterfaceSelector.Entity">
            <summary>
                实体类型API调用哪个
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.Interface.LocationAPI">
            <summary>
                地理信息API接口
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.Interface.PlaceAPI">
            <summary>
                位置服务API接口
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Interface.PlaceAPI.#ctor(NetDimension.Weibo.Client)">
            <summary>
                构造
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SearchAPI.Users(System.String,System.Int32)">
            <summary>
                搜索用户时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SearchAPI.Statuses(System.String,System.Int32)">
            <summary>
                搜索微博时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SearchAPI.Schools(System.String,System.Int32,System.Int32)">
            <summary>
                搜索学校时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10。 </param>
            <param name="type">学校类型，0：全部、1：大学、2：高中、3：中专技校、4：初中、5：小学，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SearchAPI.Companies(System.String,System.Int32)">
            <summary>
                搜索公司时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SearchAPI.Apps(System.String,System.Int32)">
            <summary>
                搜索应用时的联想搜索建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SearchAPI.AtUsers(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                @用户时的联想建议
            </summary>
            <param name="q">搜索的关键字</param>
            <param name="count">返回的记录条数，默认为10，粉丝最多1000，关注最多2000。 </param>
            <param name="type">联想类型，0：关注、1：粉丝。</param>
            <param name="range">联想范围，0：只联想关注人、1：只联想关注人的备注、2：全部，默认为2。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SearchAPI.Topics(System.String,System.Int32,System.Int32)">
            <summary>
                搜索某一话题下的微博
            </summary>
            <param name="q">搜索的话题关键字</param>
            <param name="count">单页返回的记录条数，默认为10，最大为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.ShortUrlAPI.Clicks(System.String)">
            <summary>
                获取短链接的总点击数
            </summary>
            <param name="url_short">需要取得点击数的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.ShortUrlAPI.Referers(System.String)">
            <summary>
                获取一个短链接点击的referer来源和数量
            </summary>
            <param name="url_short">需要取得点击来源的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.ShortUrlAPI.Locations(System.String)">
            <summary>
                获取一个短链接点击的地区来源和数量
            </summary>
            <param name="url_short">需要取得点击地区的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.ShortUrlAPI.Info(System.String[])">
            <summary>
                批量获取短链接的富内容信息
            </summary>
            <param name="url_short">需要获取富内容信息的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.ShortUrlAPI.Shorten(System.String[])">
            <summary>
                将一个或多个长链接转换成短链接
            </summary>
            <param name="url_long">需要转换的长链接，需要URLencoded，最多不超过20个。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.ShortUrlAPI.Expand(System.String[])">
            <summary>
                将一个或多个短链接还原成原始的长链接
            </summary>
            <param name="url_short">需要还原的短链接，需要URLencoded，最多不超过20个 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.ShortUrlAPI.ShareCounts(System.String[])">
            <summary>
                取得一个短链接在微博上的微博分享数（包含原创和转发的微博）
            </summary>
            <param name="url_short">需要取得分享数的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.ShortUrlAPI.ShareStatuses(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                取得包含指定单个短链接的最新微博内容
            </summary>
            <param name="urlShort">需要取得关联微博内容的短链接</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0 </param>
            <param name="maxID">指定此参数，则返回ID小于或等于max_id的微博，默认为0 </param>
            <param name="count">可选参数，返回结果的页序号，有分页限制</param>
            <param name="page">可选参数，每次返回的最大记录数（即页面大小），不大于200 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.ShortUrlAPI.CommentCounts(System.String[])">
            <summary>
                取得一个短链接在微博上的微博评论数
            </summary>
            <param name="url_short">需要取得评论数的短链接</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.ShortUrlAPI.CommentComments(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                取得包含指定单个短链接的最新微博评论内容
            </summary>
            <param name="urlShort">需要取得关联微博评论内容的短链接</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0 </param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的评论，默认为0 </param>
            <param name="count">可选参数，每次返回的最大记录数（即页面大小），不大于200 </param>
            <param name="page">可选参数，返回结果的页序号，有分页限制</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.PublicTimeline(System.Int32,System.Int32,System.Boolean)">
            <summary>
                返回最新的公共微博
            </summary>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <returns>dynamic json</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.FriendsTimeline(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取当前登录用户及其所关注用户的最新微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。</param>
            <returns>dynamic json</returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.HomeTimeline(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取当前登录用户及其所关注用户的最新微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.FriendsTimelineIDs(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取当前登录用户及其所关注用户的最新微博的ID
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。</param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.UserTimeline(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
                获取某个用户最新发表的微博列表
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="screenName">需要查询的用户昵称。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。 </param>
            <param name="trimUser">回值中user信息开关，0：返回完整的user信息、1：user字段仅返回user_id，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.UserTimelineIDs(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取用户发布的微博的ID
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="screenName">需要查询的用户昵称。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。</param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。</param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.RepostTimeline(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取指定微博的转发微博列表
            </summary>
            <param name="id">需要查询的微博ID。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.RepostTimelineIDs(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取一条原创微博的最新转发微博的ID
            </summary>
            <param name="id">需要查询的微博ID。</param>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.RepostByMe(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                获取当前用户最新转发的微博列表
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。 </param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.Mentions(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取最新的提到登录用户的微博列表，即@我的微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博、2：来自微群，默认为0。 </param>
            <param name="filterByType">原创筛选类型，0：全部微博、1：原创的微博，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.MentionIDs(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                获取@当前用户的最新微博的ID
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="filterByAuthor">作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。 </param>
            <param name="filterBySource">来源筛选类型，0：全部、1：来自微博、2：来自微群，默认为0。 </param>
            <param name="filterByType">原创筛选类型，0：全部微博、1：原创的微博，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.BilateralTimeline(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
                获取双向关注用户的最新微博
            </summary>
            <param name="sinceID">若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。</param>
            <param name="maxID">若指定此参数，则返回ID小于或等于max_id的微博，默认为0。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <param name="baseApp">是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0。 </param>
            <param name="feature">过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.Show(System.String)">
            <summary>
                根据微博ID获取单条微博内容
            </summary>
            <param name="id">需要获取的微博ID。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.QueryMID(System.Int32,System.String[])">
            <summary>
                通过微博（评论、私信）ID获取其MID
            </summary>
            <param name="type">获取类型，1：微博、2：评论、3：私信，默认为1。 </param>
            <param name="ids">需要查询的微博（评论、私信）ID</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.QueryID(System.Int32,System.Boolean,System.Boolean,System.String[])">
            <summary>
                通过微博（评论、私信）MID获取其ID
            </summary>
            <param name="type">获取类型，1：微博、2：评论、3：私信，默认为1。</param>
            <param name="inbox">仅对私信有效，当MID类型为私信时用此参数，0：发件箱、1：收件箱，默认为0 。 </param>
            <param name="isBase62">MID是否是base62编码，0：否、1：是，默认为0。 </param>
            <param name="mids">需要查询的微博（评论、私信）MID，批量模式下，用半角逗号分隔，最多不超过20个。</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.HotRepostDaily(System.Int32,System.Boolean)">
            <summary>
                按天返回热门转发榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.HotRepostWeekly(System.Int32,System.Boolean)">
            <summary>
                按周返回热门转发榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.HotCommentsDaily(System.Int32,System.Boolean)">
            <summary>
                按天返回热门评论榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.HotCommentsWeekly(System.Int32,System.Boolean)">
            <summary>
                按周返回热门评论榜
            </summary>
            <param name="count"></param>
            <param name="baseApp"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.Count(System.String[])">
            <summary>
                批量获取指定微博的转发数评论数
            </summary>
            <param name="ids">需要获取数据的微博ID</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.Repost(System.String,System.String,System.Int32)">
            <summary>
                转发一条微博
            </summary>
            <param name="id">要转发的微博ID。 </param>
            <param name="status">添加的转发文本，内容不超过140个汉字，不填则默认为“转发微博”。 </param>
            <param name="isComment">是否在转发的同时发表评论，0：否、1：评论给当前微博、2：评论给原微博、3：都评论，默认为0 。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.Destroy(System.String)">
            <summary>
                根据微博ID删除指定微博
            </summary>
            <param name="id">需要删除的微博ID。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.Update(System.String,System.Single,System.Single,System.String)">
            <summary>
                发布一条新微博
            </summary>
            <param name="status">要发布的微博文本内容，必须做URLencode，内容不超过140个汉字。</param>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。</param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。 </param>
            <param name="annotations">元数据，主要是为了方便第三方应用记录一些适合于自己使用的信息，每条微博可以包含一个或者多个元数据，必须以json字串的形式提交，字串长度不超过512个字符，具体内容可以自定。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.Upload(System.String,System.Byte[],System.Single,System.Single,System.String)">
            <summary>
                上传图片并发布一条新微博
            </summary>
            <param name="status">要发布的微博文本内容，内容不超过140个汉字。 </param>
            <param name="pic">要上传的图片，仅支持JPEG、GIF、PNG格式，图片大小小于5M。</param>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。 </param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。 </param>
            <param name="annotations">元数据，主要是为了方便第三方应用记录一些适合于自己使用的信息，每条微博可以包含一个或者多个元数据，必须以json字串的形式提交，字串长度不超过512个字符，具体内容可以自定。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.UploadUrlText(System.String,System.String,System.Single,System.Single,System.String)">
            <summary>
                指定一个图片URL地址抓取后上传并同时发布一条新微博
            </summary>
            <param name="status">要发布的微博文本内容，内容不超过140个汉字。 </param>
            <param name="url">图片的URL地址，必须以http开头。</param>
            <param name="lat">纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。 </param>
            <param name="log">经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。 </param>
            <param name="annotations">元数据，主要是为了方便第三方应用记录一些适合于自己使用的信息，每条微博可以包含一个或者多个元数据，必须以json字串的形式提交，字串长度不超过512个字符，具体内容可以自定。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.StatusAPI.Emotions(NetDimension.Weibo.EmotionType,NetDimension.Weibo.LanguageType)">
            <summary>
            </summary>
            <param name="type">表情类别，face：普通表情、ani：魔法表情、cartoon：动漫表情，默认为face。 </param>
            <param name="language">语言类别，cnname：简体、twname：繁体，默认为cnname。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SuggestionAPI.HotUsers(NetDimension.Weibo.HotUserCatagory)">
            <summary>
                获取系统推荐用户
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SuggestionAPI.MayInterestedUsers(System.Int32,System.Int32)">
            <summary>
                获取用户可能感兴趣的人
            </summary>
            <param name="count"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SuggestionAPI.UsersByStatus(System.String,System.Int32)">
            <summary>
                根据微博内容推荐用户
            </summary>
            <param name="content"></param>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SuggestionAPI.HotStatuses(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
                获取微博精选推荐
            </summary>
            <param name="type">微博精选分类，1：娱乐、2：搞笑、3：美女、4：视频、5：星座、6：各种萌、7：时尚、8：名车、9：美食、10：音乐。 </param>
            <param name="isPic">是否返回图片精选微博，0：全部、1：图片微博。 </param>
            <param name="count">单页返回的记录条数，默认为20。 </param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SuggestionAPI.ReorderStatuses(System.Int32,System.Int32,System.Int32)">
            <summary>
                当前登录用户的friends_timeline微博按兴趣推荐排序
            </summary>
            <param name="section">排序时间段，距现在n秒内的微博参加排序，最长支持24小时。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SuggestionAPI.ReorderStatusIDs(System.Int32,System.Int32,System.Int32)">
            <summary>
                主Feed微博按兴趣推荐排序的微博ID
            </summary>
            <param name="section">排序时间段，距现在n秒内的微博参加排序，最长支持24小时。 </param>
            <param name="count">单页返回的记录条数，默认为50。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SuggestionAPI.HotFavorites(System.Int32,System.Int32)">
            <summary>
                热门收藏
            </summary>
            <param name="count"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.SuggestionAPI.NotInterestedUsers(System.String)">
            <summary>
                把某人标识为不感兴趣的人
            </summary>
            <param name="uid">不感兴趣的用户的UID。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TagAPI.Tags(System.String,System.Int32,System.Int32)">
            <summary>
                返回指定用户的标签列表
            </summary>
            <param name="uid">要获取的标签列表所属的用户ID。 </param>
            <param name="count">单页返回的记录条数，默认为20。</param>
            <param name="page">返回结果的页码，默认为1。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TagAPI.TagsBatch(System.String[])">
            <summary>
                批量获取用户的标签列表
            </summary>
            <param name="uids">要获取标签的用户ID。最大20，逗号分隔。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TagAPI.Suggestions(System.Int32)">
            <summary>
                获取系统推荐的标签列表
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TagAPI.Create(System.String[])">
            <summary>
                为当前登录用户添加新的用户标签
            </summary>
            <param name="tags">要创建的一组标签，每个标签的长度不可超过7个汉字，14个半角字符。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TagAPI.Destroy(System.String)">
            <summary>
                删除用户标签
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TagAPI.DestroyBatch(System.String[])">
            <summary>
                批量删除用户标签
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TrendAPI.Trends(System.String,System.Int32,System.Int32)">
            <summary>
                获取某人话题
            </summary>
            <param name="uid"></param>
            <param name="count"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TrendAPI.IsFollow(System.String)">
            <summary>
                是否关注某话题
            </summary>
            <param name="trendName"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TrendAPI.Hourly(System.Boolean)">
            <summary>
                返回最近一小时内的热门话题。
            </summary>
            <param name="baseApp">是否基于当前应用来获取数据。true表示基于当前应用来获取数据。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TrendAPI.Daily(System.Boolean)">
            <summary>
                返回最近一天内的热门话题。
            </summary>
            <param name="baseApp">是否基于当前应用来获取数据。true表示基于当前应用来获取数据。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TrendAPI.Weekly(System.Boolean)">
            <summary>
                返回最近一周内的热门话题。
            </summary>
            <param name="baseApp">是否基于当前应用来获取数据。true表示基于当前应用来获取数据。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TrendAPI.Follow(System.String)">
            <summary>
                关注某话题
            </summary>
            <param name="trendName"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.TrendAPI.Destroy(System.String)">
            <summary>
                取消关注的某一个话题
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.UserAPI.Show(System.String,System.String)">
            <summary>
                获取用户信
            </summary>
            <param name="uid">需要查询的用户ID。 </param>
            <param name="screenName">需要查询的用户昵称。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.UserAPI.ShowByDomain(System.String)">
            <summary>
                通过个性化域名获取用户资料以及用户最新的一条微博
            </summary>
            <param name="domain">需要查询的个性化域名。 </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.Interface.UserAPI.Counts(System.String[])">
            <summary>
                批量获取用户的粉丝数、关注数、微博数
            </summary>
            <param name="uids"></param>
            <returns></returns>
        </member>
        <member name="T:NetDimension.Weibo.WeiboException">
            <summary>
                微博异常
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.WeiboException.#ctor">
            <summary>
                构造函数
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.WeiboException.#ctor(System.String)">
            <summary>
                构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NetDimension.Weibo.WeiboException.#ctor(System.String,System.Net.WebException)">
            <summary>
                构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:NetDimension.Weibo.WeiboException.#ctor(System.String,System.String,System.String)">
            <summary>
                构造函数
            </summary>
            <param name="code"></param>
            <param name="status"></param>
            <param name="request"></param>
        </member>
        <member name="M:NetDimension.Weibo.WeiboException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:NetDimension.Weibo.WeiboException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                GetObjectData
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="P:NetDimension.Weibo.WeiboException.Request">
            <summary>
                请求来源
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.WeiboException.ErrorCode">
            <summary>
                错误代码
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.WeiboException.ErrorMessage">
            <summary>
                错误信息
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.WeiboException.ErrorStatus">
            <summary>
                错误状态
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.WeiboParameter">
            <summary>
                微博API参数
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.WeiboParameter.#ctor">
            <summary>
                构造函数
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.WeiboParameter.#ctor(System.String,System.String)">
            <summary>
                构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:NetDimension.Weibo.WeiboParameter.#ctor(System.String,System.Boolean)">
            <summary>
                构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:NetDimension.Weibo.WeiboParameter.#ctor(System.String,System.Int32)">
            <summary>
                构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:NetDimension.Weibo.WeiboParameter.#ctor(System.String,System.Int64)">
            <summary>
                构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:NetDimension.Weibo.WeiboParameter.#ctor(System.String,System.Byte[])">
            <summary>
                构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="M:NetDimension.Weibo.WeiboParameter.#ctor(System.String,System.Object)">
            <summary>
                构造函数
            </summary>
            <param name="name">key</param>
            <param name="value">value</param>
        </member>
        <member name="P:NetDimension.Weibo.WeiboParameter.Name">
            <summary>
                参数名称
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.WeiboParameter.Value">
            <summary>
                参数值
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.WeiboParameter.IsBinaryData">
            <summary>
                是否为二进制参数（如图片、文件等）
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.OAuth">
            <summary>
                OAuth2.0授权类
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.OAuth.#ctor(System.String,System.String,System.String)">
            <summary>
                实例化OAuth类（用于授权）
            </summary>
            <param name="appKey">AppKey</param>
            <param name="appSecret">AppSecret</param>
            <param name="callbackUrl">指定在新浪开发平台后台中所绑定的回调地址</param>
        </member>
        <member name="M:NetDimension.Weibo.OAuth.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                实例化OAuth类（用于实例化操作类）
            </summary>
            <param name="appKey">AppKey</param>
            <param name="appSecret">AppSecret</param>
            <param name="accessToken">已经获取的AccessToken，若Token没有过期即可通过操作类Client调用接口</param>
            <param name="refreshToken">目前还不知道这个参数会不会开放，保留</param>
        </member>
        <member name="M:NetDimension.Weibo.OAuth.GetAuthorizeURL(NetDimension.Weibo.ResponseType,System.String,NetDimension.Weibo.DisplayType)">
            <summary>
                OAuth2的authorize接口
            </summary>
            <param name="response">返回类型，支持code、token，默认值为code。</param>
            <param name="state">用于保持请求和回调的状态，在回调时，会在Query Parameter中回传该参数。 </param>
            <param name="display">
                授权页面的终端类型，取值见下面的说明。
                default 默认的授权页面，适用于web浏览器。
                mobile 移动终端的授权页面，适用于支持html5的手机。
                popup 弹窗类型的授权页，适用于web浏览器小窗口。
                wap1.2 wap1.2的授权页面。
                wap2.0 wap2.0的授权页面。
                js 微博JS-SDK专用授权页面，弹窗类型，返回结果为JSONP回掉函数。
                apponweibo 默认的站内应用授权页，授权后不返回access_token，只刷新站内应用父框架。
            </param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.OAuth.VerifierAccessToken">
            <summary>
                判断AccessToken有效性
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.OAuth.ClientLogin(System.String,System.String,NetDimension.Weibo.AccessToken)">
            <summary>
                使用模拟方式进行登录并获得AccessToken
            </summary>
            <param name="passport">微博账号</param>
            <param name="password">微博密码</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.OAuth.GetAccessTokenByAuthorizationCode(System.String)">
            <summary>
                使用code方式获取AccessToken
            </summary>
            <param name="code">Code</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.OAuth.GetAccessTokenByPassword(System.String,System.String)">
            <summary>
                使用password方式获取AccessToken
            </summary>
            <param name="passport">账号</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.OAuth.GetAccessTokenByRefreshToken(System.String)">
            <summary>
                使用token方式获取AccessToken
            </summary>
            <param name="refreshToken">refresh token，目前还不知道从哪里获取这个token，未开放</param>
            <returns></returns>
        </member>
        <member name="M:NetDimension.Weibo.OAuth.GetAccessTokenBySignedRequest(System.String)">
            <summary>
                站内应用使用SignedRequest获取AccessToken
            </summary>
            <param name="signedRequest">SignedRequest</param>
            <returns></returns>
        </member>
        <member name="P:NetDimension.Weibo.OAuth.AppKey">
            <summary>
                获取App Key
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.OAuth.AppSecret">
            <summary>
                获取App Secret
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.OAuth.AccessToken">
            <summary>
                获取Access Token
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.OAuth.CallbackUrl">
            <summary>
                获取或设置回调地址
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.OAuth.RefreshToken">
            <summary>
                Refresh Token 似乎目前没用
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.OAuth.Proxy">
            <summary>
                代理设置
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.ResponseType">
            <summary>
                授权认证返回类型
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.ResponseType.Code">
            <summary>
                Code
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.ResponseType.Token">
            <summary>
                Access Token
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.DisplayType">
            <summary>
                回调返回类型
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.DisplayType.Default">
            <summary>
                默认
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.DisplayType.Mobile">
            <summary>
                移动界面
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.DisplayType.Popup">
            <summary>
                弹出窗
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.DisplayType.Wap12">
            <summary>
                Wap12
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.DisplayType.Wap20">
            <summary>
                Wap20
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.DisplayType.JS">
            <summary>
                Javascript
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.DisplayType.ApponWeibo">
            <summary>
                刷新框架
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.ResetCountType">
            <summary>
                重置微博技术类型
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.ResetCountType.status">
            <summary>
                新微博数
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.ResetCountType.follower">
            <summary>
                新粉丝数
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.ResetCountType.cmt">
            <summary>
                新评论数
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.ResetCountType.dm">
            <summary>
                新私信数
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.ResetCountType.mention_status">
            <summary>
                新提及我的微博数
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.ResetCountType.mention_cmt">
            <summary>
                新提及我的评论数
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.RepostCommentType">
            <summary>
                转发评论类型
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.RepostCommentType.NoComment">
            <summary>
                无评论
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.RepostCommentType.Current">
            <summary>
                当前
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.RepostCommentType.Orign">
            <summary>
                原文转发
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.RepostCommentType.Both">
            <summary>
                都有
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.GenderType">
            <summary>
                性别类型
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.GenderType.Male">
            <summary>
                男
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.GenderType.Female">
            <summary>
                女
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.GenderType.Unknown">
            <summary>
                不男不女
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.HotUserCatagory">
            <summary>
                热门微博类型
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.default">
            <summary>
                人气关注
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.ent">
            <summary>
                影视明星
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.hk_famous">
            <summary>
                港台名人
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.model">
            <summary>
                模特
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.cooking">
            <summary>
                美食与健康
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.sport">
            <summary>
                体育名人
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.finance">
            <summary>
                商界名人
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.tech">
            <summary>
                IT互联网
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.singer">
            <summary>
                歌手
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.writer">
            <summary>
                作家
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.moderator">
            <summary>
                主持人
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.medium">
            <summary>
                媒体总编
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.HotUserCatagory.stockplayer">
            <summary>
                炒股高手
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.EmotionType">
            <summary>
                表情类型
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.EmotionType.face">
            <summary>
                普通表情
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.EmotionType.ani">
            <summary>
                魔法表情
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.EmotionType.cartoon">
            <summary>
                动漫表情
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.LanguageType">
            <summary>
                语言类型
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.LanguageType.cnname">
            <summary>
                简体
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.LanguageType.twname">
            <summary>
                繁体
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.TokenResult">
            <summary>
                Token验证返回值
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.TokenResult.Success">
            <summary>
                正常
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.TokenResult.TokenExpired">
            <summary>
                Token已过期
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.TokenResult.TokenUsed">
            <summary>
                Token已被占用
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.TokenResult.TokenRevoked">
            <summary>
                Token已被回收
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.TokenResult.TokenRejected">
            <summary>
                Token被拒绝
            </summary>
        </member>
        <member name="F:NetDimension.Weibo.TokenResult.Other">
            <summary>
                其他问题
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.Coordinate">
            <summary>
                坐标
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Coordinate.Latitude">
            <summary>
                维度
            </summary>
        </member>
        <member name="P:NetDimension.Weibo.Coordinate.Longtitude">
            <summary>
                经度
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.WeiboParameterComparer">
            <summary>
                WeiboParameter实现的IComparer接口
            </summary>
        </member>
        <member name="T:NetDimension.Weibo.Utility">
            <summary>
                微博工具类
            </summary>
        </member>
        <member name="M:NetDimension.Weibo.Utility.ParseUTCDate(System.String)">
            <summary>
                将微博时间转换为DateTime
            </summary>
            <param name="dateString">微博时间字符串</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:NetDimension.Weibo.Utility.BuildPostData(System.String,NetDimension.Weibo.WeiboParameter[])">
            <summary>
                创建Post Body
            </summary>
            <param name="boundary"></param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
    </members>
</doc>
